{"/docs/blog/":{"data":{"":"\rRSS Feed "},"title":"Blog"},"/docs/docs/":{"data":{"":"","features#Features":"Recipya is a clean recipe manager web application for unforgettable family recipes, empowering you to curate and share your favorite recipes. It is focussed on simplicity for the whole family to enjoy.\nFeatures\rManage your favorite recipes Import recipes from around the web Digitize paper recipes Organize your recipes into cookbooks Works seamlessly with Nextcloud Cookbook Automatic conversion to your preferred measurement system (imperial/metric) Calculate nutritional information automatically Print any recipe in your collection Prevent your device from going to sleep while viewing a recipe Follows your system’s theme (light/dark) Cross-compiled for Windows, Linux, and macOS "},"title":"Documentation"},"/docs/docs/deployment/":{"data":{"":"Learn how to deploy Recipya to the whole world. The application can be self-hosted.\nLocal NetworkThe project can be self-hosted network-wide over your local network for access from devices other than the computer you installed the application on.\rWeb HostingThis subsection will be written once I host Recipya somewhere."},"title":"Deployment"},"/docs/docs/deployment/internet/":{"data":{"":"This subsection will be written once I host Recipya somewhere."},"title":"Web Hosting"},"/docs/docs/deployment/local-network/":{"data":{"":"","docker#Docker":"","nightly-build#Nightly Build":"The project can be self-hosted network-wide over your local network for access from devices other than the computer you installed the application on.\nDocker\rAfter installing the Docker image, you can access the site network wide via at http://[host computer IP]:[port].\nNightly Build\rLinux\rCreate a service to run the app automatically on boot.\nsudo nano /etc/systemd/system/recipya.service Copy the following content to the newly-created file.\n[Unit] Description=Recipya Service Wants=network.target [Service] ExecStart=/path/to/binary/recipya serve [Install] WantedBy=multi-user.target\rStart the service on boot.\nsudo systemctl start recipya.service sudo systemctl enable recipya.service\rYou can now access the application on your local network at http://[host computer IP]:[port].\nWindows\rThe feasibility on Windows remains to be explored."},"title":"Local Network"},"/docs/docs/development/":{"data":{"":"Learn how developing Recipya works.\nIntroductionThis chapter serves as the developer’s guide to building the application.\rDependenciesInstall the software required to build the application.\rBuildLearn how to build the application.\rTestLearn how to write tests for the application.\rWorkflow2 items"},"title":"Development"},"/docs/docs/development/build/":{"data":{"":"Go to the project directory.\ncd recipya\rBuild the project.\nmake\rStart the server. You will go through the interactive setup process if your configuration file is nonexistent.\n./bin/recipya serve\rAccess the application through a web browser at the address specified in the terminal."},"title":"Build"},"/docs/docs/development/dependencies/":{"data":{"":"","recommended-cli-programs#Recommended CLI Programs":"The following software is required to build the project.\nSoftware Version Go 1.21+ Node.js 20.10.0+ Make any Hugo latest Windows\rThe make program is required to build the project but Windows users must install it. To verify whether it’s installed on your machine, execute make in a command prompt or PowerShell.\nFollow these steps if not installed:\nOpen either the Command Prompt or Powershell in administrator mode. Execute winget install GnuWin32.Make Add C:\\Program Files (x86)\\GnuWin32\\bin to the Windows PATH environment variable. Recommended CLI Programs\rThe following lists CLI programs you should install to help you develop the project.\nThe Goose database migration tool ","windows#Windows":""},"title":"Dependencies"},"/docs/docs/development/intro/":{"data":{"":"","fetch-the-code#Fetch the Code":"","technology-stack#Technology Stack":"This chapter serves as the developer’s guide to building Recipya.\nFetch the Code\rRun the following command to get the code.\ngit clone https://github.com/reaper47/recipya.git\rYou may also use the GitHub CLI if you prefer.\ngh repo clone reaper47/recipya\rTechnology Stack\rFrontend Backend Go HTML templates Go htmx _hyperscript Tailwind CSS "},"title":"Introduction"},"/docs/docs/development/test/":{"data":{"":"","writing-tests#Writing Tests":"Recipya has an extensive test suites to ensure the software works as expected. The tests are run during the Go workflow when you open a pull request against the main branch.\nExecute the following when you wish to run all the tests locally.\nmake test\rWriting Tests\rIt is of vital important to write tests when submitting pull requests. This article explains why unit testing matters.\nYou will see many files under the internal folder that finish with *_test.go. That is where tests are written. Please refer to the development workflow section for more information and examples.\nPlease feel free to add as many tests as you deem fit to any of those files."},"title":"Test"},"/docs/docs/development/workflow/":{"data":{"":"Learn the development workflow for features and enhancements.\nAdd an EndpointIt is essential to grasp how the server works before bringing any modifications.\rSupport a WebsiteYou first need to understand how the scraper works to support a website."},"title":"Workflow"},"/docs/docs/development/workflow/add-endpoint/":{"data":{"":"","example#Example":"It is essential to grasp how the server works before bringing any modifications. Then, we will guide you through the process of incorporating an HTTP endpoint into the server.\nThe Server\rRecipya’s server code is located within the internal/server package. The main file is server.go. It exports a single with a receiver function and a corresponding struct.\nServer: This struct holds the HTTP router, the repository, the email service and the files service. You can find the declaration of each service in the internal/services/service.go file. Server.Run: Starts the web server. NewServer: Creates a server that is ready for use. It requires the services to be passed as arguments. The HTTP router is initialized during the server’s creation. We use chi due to its simplicity in organizing endpoints. Please read the mountHandlers function to observe the router in action.\nExample\rLet’s walk through an example aimed at adding an endpoint that searches for recipes.\nRouter\rThe first step involves adding the endpoint to the router. A suitable endpoint is GET /recipes/search?q=query. Open the internal/server/server.go file and include the endpoint within the /recipes route block. The handler should be named recipesSearchHandler, following the {resource}{LastWordEndpoint}{Handler} naming convention.\ninternal/server/server.gor.Route(\"/recipes\", func(r chi.Router) { r.Use(s.mustBeLoggedInMiddleware) r.Get(\"/search\", recipesSearchHandler) ... })\rWith the route established, it is time to declare the handler. Since we are dealing with the /recipes resource, add the handler to the handlers_recipes.go file.\ninternal/server/handlers_recipes.gofunc (s *Server) recipesSearchHandler(w http.ResponseWriter, r *http.Request) { panic(\"TODO: To implement\") }\rWe are now ready to create tests for our route.\nTest\rTests related to the server are written in the handlers_{resource}_test.go files. The tests for our handlers are stored in the handlers_recipes_test.go file. The naming convention for test functions is TestHandlers_{Resource}_{Endpoint}. Let’s write the foundation function of our tests.\ninternal/server/handlers_recipes_test.gofunc TestHandlers_Recipes_AddManual(t *testing.T) { srv := newServerTest() uri := \"/recipes/search\" }\rThe subsequent step involves writing the different tests that add value to the users.\ninternal/server/handlers_recipes_test.gofunc TestHandlers_Recipes_AddManual(t *testing.T) { srv := newServerTest() uri := \"/recipes/search\" t.Run(\"must be logged in\", func(t *testing.T) { assertMustBeLoggedIn(t, srv, http.MethodGet, uri) }) t.Run(\"search fails\", func(t *testing.T) { t.Fail() }) t.Run(\"user has no recipes\", func(t *testing.T) { t.Fail() }) t.Run(\"user searches empty string\", func(t *testing.T) { t.Fail() }) testcases := []struct { name string in string want models.Recipes }{ {name: \"user searches empty string\", in: \"\", want: ...}, {name: \"user searches for lunch\", in: \"lunch\", want: ...}, ... } for _, tc := range testcases { t.Run(tc.name, func(t *testing.T) { rr := sendHxRequestAsLoggedIn(srv, http.MethodGet, uri+\"?q=\"+tc.in, noHeader, nil) ... }) } }\rThe body of the tests is omitted for brevity. Run the tests to ensure that they fail.\nHandler\rThe next step entails crafting the handler’s code. Return to the handles_recipes.go file, and implement the recipesSearchHandler function that will make the tests go green. For instance, the implementation could resemble the following.\ninternal/server/handlers_recipes.gofunc (s *Server) recipesSearchHandler(w http.ResponseWriter, r *http.Request) { userID := getUserID(r) query := chi.URLParam(r, \"q\") recipes, err := s.Repository.SearchRecipes(query, userID) if err != nil { w.Header().Set(\"HX-Trigger\", makeToast(\"Failed to search recipes.\", errorToast)) w.WriteHeader(http.StatusInternalServerError) return } templates.RenderComponent(w, \"recipes\", \"search-recipes\", templates.Data{Recipes: recipes}) }\rThis code gets the logged-in user’s ID and the search query, then passes them to the SearchRecipes function of the repository. If this function encounters an error, an HTMX toast is sent to the user, accompanied by an HTTP 500 status code. Otherwise, the HTML containing the recipes is sent.\nThe templates.RenderComponent function displays a template from the web/templates/components directory. Its second parameter is the name of one of the files within that directory, excluding the extension. The third parameter is the name of the template within a file in that folder. Lastly, the fourth parameter is a struct containing data for the GoHTML template.\nRepository\rThe final piece of the puzzle involves writing the s.Repository.SearchRecipes function. The repository is an interface that declares functions for interacting with a database. Currently, Recipya supports sqlite only. To support other databases, we need define a struct to satisfy the RepositoryService interface.\nLet’s declare the function within the RepositoryService interface. The functions are declared alphabetically.\ninternal/services/service.gotype RepositoryService interface { // AddAuthToken adds an authentication token to the database. AddAuthToken(selector, validator string, userID int64) error // AddRecipe adds a recipe to the user's collection. AddRecipe(r *models.Recipe, userID int64) (int64, error) ... // SearchRecipes gets the user's recipes that include the search query. SearchRecipes(query string, userID int64) (models.Recipes, error) ... // VerifyLogin checks whether the user provided correct login credentials. // If yes, their user ID will be returned. Otherwise, -1 is returned. VerifyLogin(email, password string) int64 // Websites gets the list of supported websites from which to extract the recipe. Websites() models.Websites }\rSubsequently, let’s implement the function within the sqlite_service.go file.\ninternal/services/sqlite_service.gofunc (s *SQLiteService) SearchRecipes(query string, userID int64) (models.Recipes, error) { // s.Mutex.Lock() // Lock when you are inserting, updating or deleting from the database. // defer s.Mutex.Unlock() ctx, cancel := context.WithTimeout(context.Background(), shortCtxTimeout) defer cancel() rows, err := s.DB.QueryContext(ctx, statements.SelectSearchRecipes, query, userID) if err != nil { return nil, err } defer rows.Close() var recipes models.Recipes for rows.Next() { // code to scan a recipe ... recipes = append(recipes, c) } return recipes, nil }\rRemember, invoking s.Mutex.Lock() and defer s.Mutex.Unlock() is necessary when inserting, updating, or deleting database entries. However, in this scenario, we’re merely fetching data, rendering the mutex unnecessary.\nSQL statements are organized by action within the internal/services/statements directory. The naming convention is {Action}{Resource}. In our case, a SELECT statement for fetching recipes is termed SelectSearchRecipes and would reside in the select.go file.\nEvery statement is a const whose value is the SQLite statement itself. If Recipya ever supports other databases, we shall find a way to organize the statements per database type.\nYou can call it a day and open a PR once you wrote your SQL and the tests pass.","the-server#The Server":""},"title":"Add an Endpoint"},"/docs/docs/development/workflow/import-website/":{"data":{"":"","the-scraper#The Scraper":"","workflow#Workflow":"You first need to understand how the scraper works to support a website. Then, we will guide you through adding a website to the supported list with an example.\nThe Scraper\rRecipya developed its own recipe scraper, which resides in the internal/scraper package. This scraper uses goquery to extract information from web pages. Its main file is scraper.go. You will find a single exposed function named Scrape, which takes a URL and a files service as parameters. The files services is an interface with functions to manipulate files in the OS. The use of an interface simplifies the process of mocking file operations during testing.\nYou can read how the function works, but essentially it involves fetching the web page using Go’s HTTP client, creating a goquery document from the response, extracting into a models.RecipeSchema struct, uploading the image to the server, and finally returning the recipe schema model. The image is compressed and resized. Whether compression is too high remains is subject to evaluation.\nWorkflow\rLet’s assume a user requests https://www.example.com/recipes/declicious-bbq-steak to be supported. This section will help you understand how to add this website to the list of supported sites.\nDatabase\rInitially, a SQLite migration file needs to be created using Goose to insert the desired website into the websites table. To do so, open a terminal and navigate to internal/services/migrations. Then, generate the migration file.\ncd internal/services/migrations goose create support-website sql\rThe support-website is the name of the migration. It can be anything else. The command will create a new file of the form timestamp_name_of_migration.sql. It will be embedded into the executable on build and will be executed when the user starts the server.\nThe final step involves inserting the website into the database:\ninternal/services/migrations/timestamp_support_website.sql-- +goose Up INSERT INTO websites (host, url) VALUES ('example.com', 'https://www.example.com/recipes/declicious-bbq-steak'); -- +goose Down DELETE FROM websites WHERE host = 'example.com' AND url = 'https://www.example.com/recipes/declicious-bbq-steak';\rThe host field could eventually be removed because we can determine it from Go using the net/url package.\nTest\rSetting up a test involves accessing the website and creating a test case within internal/scraper/scraper_{letter}_test.go. In our case, open internal/scraper/scraper_E_test.go because example begins with E. The tests within the testcases slice are listed alphabetically so insert your name: \"example.com\" test where appropriate. You can use an existing struct as a template.\nNext, alternate between the recipe web page and the test to modify the models.RecipeSchema of the want field. You can proceed to writing code once the setup is done.\nExecuting the test by clicking the green play button to the left it should confirm its failure. If you notice the test returns a models.RecipeSchema that looks valid, then replace the empty schema of the test with the one from the output and make the test go green. Otherwise, continue to the next section.\nThe Go Code\rThe initial step is to include the example.com case within the list of supported websites. To achieve this, open internal/scraper/websites.go. This file contains the scrapeWebsite function, which executes the relevant scrape function for the parsed HTML web page. Your task involves adding the host within the switch-case block. Therefore, add case \"example\" to the switch-case block of case ’e’.\nFollowing this, the body of the case must be added by calling a custom HTML parser function. Its naming convention is scrape{Host}. In your case, it would be return scrapeExample(doc). Then, create a new file named example.go under internal/scraper and add the func scrapeKuchniadomova(root *goquery.Document) (models.RecipeSchema, error) function. Please check any custom scraper file to understand how to write your own.\nCongratulations! That is all you need to know to support a website. Feel free to open a PR once your scrape function is written and the tests pass."},"title":"Support a Website"},"/docs/docs/features/":{"data":{"":"Overview of Recipya’s features.\nRecipes8 items\rCookbooks5 items\rMeasurement SystemsUsers usually adhere to one preferred measurement system, rarely feeling comfortable with multiple systems.\rNutrition FactsMany recipes lack nutritional information users may be unwilling to calculate themselves. Recipya addresses this.\rExport DataLearn how to download your data.\rIntegrationsThe application offers integrations with other recipe manager applications."},"title":"Features Tour"},"/docs/docs/features/cookbooks/":{"data":{"":"A cookbook is a collection of recipes. You can access this feature from ‘Cookbook’ tab of the sidebar.\nCreateClick the Add Cookbook button from the cookbook feature tab to create a cookbook.\rEditYou can update the image of a cookbook as well as reorder the recipes.\rDeleteTo delete a cookbook from your collection, first click the three vertical dots at the top right of the cookbook you wish to delete.\rDownloadAny of your cookbooks can be downloaded as a PDF file for physical, offline, or archival purposes.\rShareYou can share a cookbook to your family and friends."},"title":"Cookbooks"},"/docs/docs/features/cookbooks/add/":{"data":{"":"","adding-recipes#Adding Recipes":"Click the Add Cookbook button from the cookbook feature tab to create a cookbook. You will be prompted for its title.\nThe cookbook will then be displayed to you immediately. The following image shows two created cookbooks.\nAdding Recipes\rYour cookbook is empty after creation. You can add recipes by searching for them in the search box.\nAfter typing, press Enter or click the magnifying glass to submit your search request. The results will appear below the search box. Queries are case-insensitive.\nFinally, click the Add button on the recipes you want to the add to the cookbook."},"title":"Create"},"/docs/docs/features/cookbooks/delete/":{"data":{"":"To delete a cookbook from your collection, first click the three vertical dots at the top right of the cookbook you wish to delete. Then, click the Delete submenu item. You will be prompted whether you want to proceed before deletion.\n🚫\rDeleting a cookbook is irreversible. It will be gone forever. However, its recipes will be left untouched.\rThe cookbook will then be deleted from your collection and the changes will be reflected immediately."},"title":"Delete"},"/docs/docs/features/cookbooks/download/":{"data":{"":"Any of your cookbooks can be downloaded as a PDF file for physical, offline, or archival purposes. Click here to view a sample.\nTo download a cookbook, first click the three vertical dots at the top right of the cookbook you wish to download. Then, click the Download submenu item. The file will be downloaded immediately."},"title":"Download"},"/docs/docs/features/cookbooks/edit/":{"data":{"":"","reorder-the-recipes#Reorder the Recipes":"","switch-view-mode#Switch View Mode":"You can update the image of a cookbook as well as reorder the recipes.\nUpdate the Image\rClick the image of a cookbook to update it. You will be then prompted with the operating system’s file picker to select and image.\nThe cookbook’s image will be updated immediately after selecting the file.\nReorder the Recipes\rYou can reorder the recipes in a cookbook. This is useful when you want its recipes to flow in a certain way. For example, you might want all appetizers to appear first, then the lunches, and finally the dinners.\nTo reorder them, first open a cookbook. In the following image, we want to switch the position of the first recipe with that of the last.\nThen, drag the page number of the recipe you wish to update. Once at the desired position, release the mouse. The pages will be immediately updated.\nSwitch View Mode\rThe cookbooks can be displayed in the following modes:\nGrid List To display them as a grid, click the grid icon under your avatar.\nTo display them as a list, click the list icon.","update-the-image#Update the Image":""},"title":"Edit"},"/docs/docs/features/cookbooks/share/":{"data":{"":"You can share a cookbook to your family and friends. To do so, you must first generate the cookbook’s share link by clicking the Share submenu option from the three dots icon’s menu.\nThe link will then be displayed to you, ready to be sent to your family and friends.\nAnyone who opens this link will be presented with the recipes you added to the cookbook you shared. Any of its recipes can then be viewed without the need to log in."},"title":"Share"},"/docs/docs/features/integrations/":{"data":{"":"","compatibility#Compatibility":"","mastercook#MasterCook":"Recipya offers integrations with other recipe manager applications. You can access them from the Recipes side tab in the settings.\nCompatibility\rIntegration Import Export MasterCook Nextcloud Cookbook Nextcloud Cookbook\rNextcloud Cookbook is an app for Nextcloud. Follow these steps to import your recipes from a Nextcloud Cookbook instance:\nGo to the Integrations setting and select the Nextcloud option. Click the button adjacent to the menu of options. In the dialog that appears, enter the URL and credentials of your Nextcloud instance. Click the Import button. Your recipes will be swiftly transferred from Nextcloud Cookbook to Recipya.\nMasterCook\rYou can import your MasterCook recipes from the import button on the add recipe page. You can either upload a single .mxp file or a zip archive containing multiple .mxp files.\nThis website contains endless MasterCook recipe collections for you to try.","nextcloud-cookbook#Nextcloud Cookbook":""},"title":"Integrations"},"/docs/docs/features/measurement-systems/":{"data":{"":"","automatic-conversion#Automatic Conversion":"Users usually adhere to one preferred measurement system, rarely feeling comfortable with multiple systems.\nWithin Recipya, you have the option to set your preferred measurement system. The ones currently supported are imperial and metric. Europeans predominantly use the metric system, while Americans favor the imperial one.\nAll options related to this are found under the Recipes side tab in the settings. To access your settings, click on your avatar in the top right corner of any page within Recipya. Then, select the Settings option.\nChanging System\rYou can change the measurement system to your preferred one by selecting a system from the dropdown next to the Measurement system setting.\nℹ️\rThe default measurement system is imperial.\rAll of your recipes in your collection will be converted to the measurement system you selected. This process is automatic.\nAutomatic Conversion\rSelect this option if you wish to automatically convert new recipes to your preferred measurement system.\nFor instance, let’s assume you prefer the metric measurement system, and you want to import a delicious recipe from an American website. The website employs the imperial system. On import, the recipe will be automatically converted to metric if the Convert automatically checkbox is checked. Otherwise, the recipe will remain in the imperial system.","changing-system#Changing System":""},"title":"Measurement Systems"},"/docs/docs/features/my-first-post/":{"data":{"":"","recipes#Recipes":"It is possible to download your data through the settings. To access them, click on your avatar in the top right corner of any page within Recipya. Then, select the Settings option.\nFinally, click the Recipes settings tab on the left. You can select the data you want to export from the dropdown to the right of the Export data setting.\nThe dropdown is organized in groups. Let’s go over them.\nRecipes\rYou can export your recipes in the following formats.\nJSON PDF The JSON format exports all your recipes in a zipped archive organized in a hierarchical manner, with each folder containing a JSON file of the recipe and an existing image. The recipe file follows the Recipe schema standard.\nThe PDF format exports all your recipes in a zipped archive. Each file in the archive follows the naming convention {recipe name}.pdf."},"title":"Export Data"},"/docs/docs/features/nutrition-facts/":{"data":{"":"Many recipes lack nutritional information users may be unwilling to calculate themselves. To address this issue, Recipya can calculate the nutrition facts for you automatically when adding a recipe.\nTo enable this feature, access your settings via your avatar, click the Recipes tab on the left, and check the Calculate nutrition facts setting’s checkbox.\nThis setting is initially disabled because adding a recipe will take up to a few additional seconds. This happens because querying the nutritional database for every ingredient takes time.\nRecipya does its best at calculating the nutritional information based on a recipe’s ingredients. However, please understand that the calculation is more indicative than absolute truth. The information is based on the U.S. Department of Agriculture, Agricultural Research Service’s FoodData Central, which is an integrated data system that provides expanded nutrient profile data. Please open an issue on GitHub if you ever notice a recipe with nutritional information that seems vastly inaccurate.\nℹ️\rThe calculation can only be done with ingredients written in english because the database is in english only."},"title":"Nutrition Facts"},"/docs/docs/features/recipes/":{"data":{"":"You can add, view, edit, and delete any recipe in your collection.\nAddYou can add a recipe by clicking the blue Add Recipe in the middle of the application bar.\rViewTo view a recipe, you first need to view your collection of recipes.\rEditTo edit a recipe in your collection, you first must view a recipe.\rDeleteTo delete a recipe from your collection, you first must view a recipe.\rSearchYou can search for recipes from the search text box below the add recipes button of the recipes view page.\rShareA recipe can be shared to anyone who has the share link.\rPrintA recipe can be printed for your convenience and preference.\rWakelockLearn how to keep your device awake while cooking."},"title":"Recipes"},"/docs/docs/features/recipes/add/":{"data":{"":"","adding-recipes#Adding Recipes":"You can add a recipe by clicking the blue Add Recipe in the middle of the application bar.\nAdding Recipes\rYou will be presented with four different ways of adding a recipe to your collection.\nManual Scan Website Import Manual\rThe simplest method of inputting a recipe involves completing a form that outlines your dish. Mandatory fields are indicated with an asterisk (*).\nYou might find these shortcuts useful if you are filling the form from your computer.\nShortcut How to enable Result Enter Focus on an ingredient text input Add ingredient row Ctrl + Enter Focus on an instruction text area Add instruction row You can also reorder the ingredients and the instructions by dragging the arrow vertically.\nScan\rYou can upload an image or a scan of a handwritten or printed recipe to add it to your collection. This option is useful for digitizing your and your family’s paper recipes.\nTo do so, click the Upload button and select an image in your computer.\n⚠️\rYou must have an Azure AI Vision account to use this feature.\rWebsite\rYou can import any recipe from the supported websites. To do so, click the Fetch button, paste the recipe’s URL and click OK.\nThe application will display the recipe if the request is successful. Otherwise, you will be presented with a message asking you to either go back to the previous page or request the Recipya developers to support the website.\nTo view all supported websites, please click on the supported word. You can scrape a website not in the supported list, but recipe extraction may fail. If it does, you can request support for the website by clicking the button that appears.\nImport\rYou can import recipes in the following formats:\n.json: If they adhere to the Recipe schema standard .mxp: Exported recipes from MasterCook You can upload either a single file or a zip archive containing multiple recipes. The recipes in a zip file may be organized by folder. Each folder may contain the .json recipe file and an image file. All other files in a folder will be ignored during processing. Here is an example of how such zip may look like."},"title":"Add"},"/docs/docs/features/recipes/delete/":{"data":{"":"To delete a recipe from your collection, you first must view a recipe. Then, click the trashcan icon to the right of the recipe’s title. You will be prompted whether you want to proceed before deletion.\n🚫\rDeleting a recipe is irreversible. It will be gone forever."},"title":"Delete"},"/docs/docs/features/recipes/edit/":{"data":{"":"To edit a recipe in your collection, you first must view a recipe. Then, click the pencil icon to the left of the recipe’s title.\nYou will enter the edit mode, which allows you to edit any of the recipe’s information. Press the blue Update button at the bottom of the form to save your changes."},"title":"Edit"},"/docs/docs/features/recipes/print/":{"data":{"":"A recipe can be printed for your convenience and preference.\nTo print, you first must view a recipe. Then, click the printer icon to the right of the recipe’s title.\nYou will then be presented with the print dialog."},"title":"Print"},"/docs/docs/features/recipes/search/":{"data":{"":"You can search for recipes from the search text box below the add recipes button of the recipes view page. Type your keywords delimited by either a space, comma or both. Then press the enter key to fire the search.\nYour query will search the following fields of all recipes belonging to you:\nTitle Description Category Ingredients Instructions Keywords Source The results will be ranked based on their relevance to the search terms."},"title":"Search"},"/docs/docs/features/recipes/share/":{"data":{"":"A recipe can be shared to anyone who has the share link.\nTo generate the link, you first must view a recipe. Then, click the share icon to the right of the recipe’s title.\nThe link will be generated and displayed for you to copy, ready to be sent to your friends. Its naming convention is {host}/r/{UUID}. The UUID will prevent any clash with someone else’s shared recipe because no two UUID is the same."},"title":"Share"},"/docs/docs/features/recipes/view/":{"data":{"":"","scaling#Scaling":"To view a recipe, you first need to view your collection of recipes.\nYou will then be presented with the recipe’s information for you to follow while cooking.\nℹ️\rYou can click or tap on the ingredients and instructions to cross them out.\rScaling\rTo scale a recipe, use the number input in the yield square to select the number of servings you want to make.\nIf you want to make more servings, enter a higher number. If you want to make fewer servings, enter a lower number.\nFor example, the recipe above yields 6 servings. To double the recipe, set the number of servings to 12. The recipe will then be automatically scaled to make 12 servings of oven roasted potatoes, as shown below.\n⚠️\rThe scaling feature currently only scales ingredients, leaving instructions untouched. This means that if an instruction mentions a specific amount of an ingredient, then that amount will not be scaled. This limitation will be addressed in the future."},"title":"View"},"/docs/docs/features/recipes/wakelock/":{"data":{"":"Imagine you are cooking a recipe from a mobile device. You gather all the ingredients, and you are ready to start, but your device goes to sleep. You unlock your device and start getting your hands dirty in the flour. Your device goes to sleep again. You clean your hands, unlock your phone, and continue the recipe. Your device goes to sleep once again. You are frustrated. This process continues over and over. Your device is dirty and so is your food.\nYou want the device not to sleep while you are cooking.\nRecipya solves this problem by providing a browser wakelock when viewing a recipe, preventing the device from going to sleep.\nℹ️\rThe wakelock is turned on automatically when viewing a recipe.\rOn supported browsers, you will notice a light bulb icon to the far left of a recipe’s title. When the light bulb is on, the wakelock is enabled and the screen will not sleep.\nWhen turned off, the wakelock is disabled and the screen will eventually sleep.\n⚠️\rThe wakelock feature is not supported on the following platforms:\nFirefox Firefox for Android "},"title":"Wakelock"},"/docs/docs/installation/":{"data":{"":"Learn how install Recipya.\nPrerequisitesDiscover what the system requirements are.\rConfiguration FileExplore the configuration file.\rDockerInstall the application with Docker.\rNightly BuildInstall the nightly build of the application.\rWindows usersImportant information for Windows users."},"title":"Installation"},"/docs/docs/installation/config-file/":{"data":{"":"The configuration file sets important variables for the application. Let’s go over each of them.\nemail from: The administrator’s email address. It is usually the email address of your SendGrid account. sendGridAPIKey: Your SendGrid API key. The free tier should be sufficient for your needs. integrations azureComputerVision resourceKey: The KEY 1 variable displayed on the Keys and endpoint tab of your Computer vision resource in the Azure Portal. visionEndpoint: The Endpoint variable displayed on the Keys and endpoint tab of your Computer vision resource in the Azure Portal. server isDemo: Whether the app is a demo version. Its value can be either true or false. isProduction: Whether the app is in production. Its value can be either true or false. port: The port the app will be served through if localhost. url: The website the app is served on. This URL will serve as the base link in the emails. "},"title":"Configuration File"},"/docs/docs/installation/docker/":{"data":{"":"","using-docker#Using Docker":"","using-docker-compose#Using Docker Compose":"A Docker image named reaper99/recipya is produced nightly.\nYou can either install the application using Docker or Docker Compose.\nUsing Docker\rYou first have to fetch it.\ndocker pull reaper99/recipya:nightly\rThen, run the image. You must pass your config.json file to the container.\ndocker run -v path/to/config.json:/app/config.json -p [host port]:[port specified in config.json] -d reaper99/recipya:nightly reaper99/recipya:nightly\rUsing Docker Compose\rYou can use Docker Compose to run the container. First, you need to modify the ports and the path to your local config.json in the compose.yaml. Then, start the application.\ndocker-compose up -d\rAccess the app through your browser at http://localhost:[host's port].\nIf you are using Windows and you intend to access the app on other devices within your home network, please ensure to Allow the connection of the Docker Desktop Backend inbound Windows Defender Firewall rule."},"title":"Docker"},"/docs/docs/installation/nightly-build/":{"data":{"":"A portable, standalone build is available on the releases page. It is updated nightly if the main branch has new commits.\nFirst, download and extract the zip file compatible with your system. Please consult the supported platforms table if you are unsure which file to download.\nThen, start the server by opening a command prompt in the folder, and run the following command. The application will perform a one-time setup if not already done.\n./recipya-{os}-{architecture} serve\rYou can now access the website at the address specified.\nℹ️\rThe program cannot be updated within the interface yet. If you wish to update the app, please download the nightly build and replace your existing recipya executable with the one from the build zip."},"title":"Nightly Build"},"/docs/docs/installation/system-requirements/":{"data":{"":"","system-requirements#System Requirements":"","third-party-services#Third-party Services":"System Requirements\rThe following table lists the supported platforms and devices.\nPlatform Explanation Device Examples darwin/amd64 macOS on 64-bit Intel (x86-64) architecture Apple MacBook, iMac, Mac Mini, Mac Pro darwin/arm64 macOS on ARM64 architecture MacBook Air (M1), MacBook Pro (M1), Mac Mini (M1) linux/386 Linux on 32-bit x86 architecture Older PCs, embedded systems linux/amd64 Linux on 64-bit x86 architecture (x86-64) Desktops, laptops, servers, cloud instances linux/arm Linux on ARMv6 architecture Raspberry Pi 1st gen, IoT devices, some old smartphones linux/arm64 Linux on ARMv8 64-bit architecture Raspberry Pi 3rd/4th gen, modern smartphones linux/riscv64 Linux on 64-bit RISC-V architecture RISC-V development boards, experimental devices linux/s390x Linux on IBM System z architecture IBM mainframes, servers windows/amd64 Windows on 64-bit x86 architecture Modern Windows PCs, servers, virtual machines windows/arm64 Windows on ARM64 architecture Microsoft Surface Pro X, ARM-based Windows devices In addition, you must have at least 300 MB of free space.\nThird-party Services\rRecipya uses the following third-party services to enhance the product.\nSendGrid\rSendGrid provides a cloud-based service that assists businesses with email delivery. They offer a free plan that allows you to send up to 100 emails per day.\nWithin Recipya, the email module is used for the following events:\nSend a confirmation email to a user who registered. Notify the administrator when some errors occur. Inform the administrator when a user requests a URL to import from an unsupported website. If none of these reasons persuade you to use this service, then leave the email.from and email.sendGridAPIKey fields in the configuration file empty. No emails will then be sent.\nAzure AI Vision\rAzure AI Vision is a unified service that offers innovative computer vision capabilities. It gives apps the ability to analyze images, read text, and detect faces with prebuilt image tagging, text extraction with optical character recognition (OCR), and responsible facial recognition. Microsoft offers a free plan that allows you to perform 5000 transactions per month.\nWithin Recipya, this service is used to digitize recipes.\nIf you do not plan on digitizing paper recipes, then leave the integrations.azureComputerVision.resourceKey and integrations.azureComputerVision.visionEndpoint fields in the configuration file empty. This feature will then be disabled."},"title":"Prerequisites"},"/docs/docs/installation/windows-users/":{"data":{"":"If you intend to access the website on other devices within your home network, please ensure that the program is permitted through the firewall. To verify:\nOpen the “Firewall \u0026 network protection setting” Click on “Allow an app through firewall” Scroll down to recipya*.exe Ensure private and public boxes are checked Apply the settings Find the IP address of your machine (Wi-Fi settings -\u003e Click on the network you are connected to -\u003e IPv4 address) On your other device, access http://[IPv4 address]:[port] "},"title":"Windows Users"}}