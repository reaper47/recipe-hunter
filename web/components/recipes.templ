package components

import (
	"fmt"
	"github.com/reaper47/recipya/internal/models"
	"github.com/reaper47/recipya/internal/templates"
	"strconv"
	"strings"
)

templ AddRecipe(data templates.Data) {
	if data.IsHxRequest {
		<title hx-swap-oob="true">Add Recipe | Recipya</title>
		@addRecipe()
	} else {
		@layoutMain("Add Recipe", data) {
			@addRecipe()
		}
	}
}

templ addRecipe() {
	<div class="grid w-full h-full grid-cols-1 gap-4 p-4 md:grid-cols-2 md:grid-rows-2 xl:m-auto xl:max-w-6xl md:grid-flow-col">
		<div class="card card-compact shadow-lg rounded-xl h-96 bg-base-100">
			<figure>
				<img
					class="object-cover w-full h-40 rounded-t-xl"
					src="/static/img/recipes/new/manual.webp"
					alt="Writing on a piece of paper with a traditional pen."
				/>
			</figure>
			<div class="card-body">
				<h2 class="card-title">Manual</h2>
				<p>Add a new recipe by filling out its content manually.</p>
				<hr class="dark:border dark:border-gray-800"/>
				<div class="card-actions justify-end">
					<button
						class="btn btn-outline btn-sm btn-block"
						hx-get="/recipes/add/manual"
						hx-target="#content"
						hx-push-url="true"
					>
						Fill In
					</button>
				</div>
			</div>
		</div>
		<div class="card card-compact shadow-lg rounded-xl h-96 bg-base-100">
			<figure>
				<img
					class="object-cover w-full h-40 rounded-t-xl"
					src="/static/img/recipes/new/import.webp"
					alt="Writing on a piece of paper with a traditional pen."
				/>
			</figure>
			<div class="card-body">
				<h2 class="card-title">Website</h2>
				<p>
					Fetch a recipe or recipes from
					<button
						class="underline"
						hx-get="/recipes/supported-websites"
						hx-target="#search-results"
						onclick="supported_websites_dialog.showModal()"
					>
						supported
					</button>
					websites. If the website is unsupported, the software will try to extract the recipe, but there
					is no guarantee of success.
				</p>
				<hr class="dark:border dark:border-gray-800"/>
				<div class="card-actions justify-end">
					<button
						class="btn btn-outline btn-sm btn-block"
						onclick="websites_dialog.showModal()"
					>
						Fetch
					</button>
				</div>
			</div>
		</div>
		<div class="card card-compact shadow-lg rounded-xl h-96 bg-base-100">
			<figure>
				<img
					class="object-cover w-full h-40 rounded-t-xl"
					src="/static/img/recipes/new/camera.webp"
					alt="Writing on a piece of paper with a traditional pen."
				/>
			</figure>
			<div class="card-body">
				<h2 class="card-title">Scan</h2>
				<p>Upload the image files or PDF of the recipe you want to add or take a picture using your device's camera.</p>
				<hr class="dark:border dark:border-gray-800"/>
				<div class="card-actions">
					<button class="btn btn-outline btn-sm btn-block" type="button" onclick="add_ocr_dialog.showModal()">
						Upload
					</button>
				</div>
			</div>
		</div>
		<div class="card card-compact shadow-lg rounded-xl h-96 bg-base-100">
			<figure>
				<img
					class="object-cover w-full h-40 rounded-t-xl"
					src="/static/img/recipes/new/schema.webp"
					alt="Writing on a piece of paper with a traditional pen."
				/>
			</figure>
			<div class="card-body">
				<h2 class="card-title">Import</h2>
				<p>
					Import exported recipes from
					<button
						class="underline"
						hx-get="/recipes/supported-applications"
						hx-target="#application-results"
						onclick="supported_apps_import_dialog.showModal()"
					>
						various apps,
					</button>
					plain text files
					or files that adhere to the <a href="https://schema.org/Recipe" target="_blank" class="link">recipe schema</a> standard.
				</p>
				<p>
					You can also download recipe schema files directly using the
					<a
						class="link tooltip"
						data-tip="Simply drag this link to your bookmarks bar, and click the bookmark while on a recipe website.  If a recipe schema downloads successfully, you can import it here."
						href="javascript:(function(){
							let recipeCount = 0;
							const jsonSchemaScripts = ([...document.querySelectorAll('script[type=%22application/ld+json%22]')]);
							for (const jsonSchemaScript of jsonSchemaScripts) {
								let data = JSON.parse(jsonSchemaScript.innerHTML);
								if (Array.isArray(data) && data.length > 0) {
									data = data[0];
								}
								if (data['@type'] !== 'Recipe') {
									continue;
								}
								const blob = new Blob([JSON.stringify(data)]);
								const url = URL.createObjectURL(blob, { type: 'application/json' });
								const a = document.createElement('a');
								a.href = url;
								a.download = data.name ? data.name + '.json' : 'recipe.json';
								a.click();
								URL.revokeObjectURL(url);
								recipeCount++;
							} if (recipeCount === 0) {
								alert('Unable to find a Recipe schema on this site!');
							}
						})()"
					>
						Recipya Bookmarklet
					</a>.
				</p>
				<hr class="dark:border dark:border-gray-800"/>
				<div class="card-actions">
					<button class="btn btn-outline btn-sm btn-block" onclick="import_recipes_dialog.showModal()">
						Import
					</button>
				</div>
			</div>
		</div>
		<dialog id="websites_dialog" class="modal">
			<div class="modal-box">
				<form method="dialog">
					<button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
				</form>
				<h3 class="font-bold text-lg">Fetch recipes from websites</h3>
				<form class="py-4" hx-post="/recipes/add/website" hx-swap="none" _="on submit call websites_dialog.close() then set me.querySelector('textarea').value to ''">
					<div class="grid mb-4">
						<label class="form-control">
							<div class="label">
								<span class="label-text">Enter one or more URLs, each on a new line.</span>
							</div>
							<textarea
								class="textarea textarea-bordered whitespace-pre-line"
								placeholder="URL 1
URL 2
URL 3
URL 4
etc..."
								name="urls"
								rows="5"
							></textarea>
						</label>
					</div>
					<button class="btn btn-block btn-primary btn-sm">Submit</button>
				</form>
			</div>
		</dialog>
		<dialog id="supported_websites_dialog" class="modal">
			<div class="modal-box h-2/3">
				<form method="dialog">
					<button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
				</form>
				<h3 class="mb-1">
					<label>
						<input
							type="search"
							placeholder="Search a website"
							class="input input-bordered input-sm w-11/12"
							_="on input show <tbody>tr/> in next <table/> when its textContent.toLowerCase() contains my value.toLowerCase()"
						/>
					</label>
				</h3>
				<div class="overflow-x-auto">
					<table class="table table-zebra table-sm">
						<thead>
							<tr class="text-center">
								<th class="py-1">Number</th>
								<th class="py-1">Website</th>
							</tr>
						</thead>
						<tbody id="search-results"></tbody>
					</table>
				</div>
			</div>
		</dialog>
		<dialog id="supported_apps_import_dialog" class="modal">
			<div class="modal-box h-2/3">
				<form method="dialog">
					<button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
				</form>
				<h3 class="mb-1">
					<label>
						<input
							type="search"
							placeholder="Search an application"
							class="input input-bordered input-sm w-11/12"
							_="on input show <tbody>tr/> in next <table/> when its textContent.toLowerCase() contains my value.toLowerCase()"
						/>
					</label>
				</h3>
				<div class="overflow-x-auto">
					<table class="table table-zebra table-sm">
						<thead>
							<tr class="text-center">
								<th class="py-1">Number</th>
								<th class="py-1">Application</th>
							</tr>
						</thead>
						<tbody id="application-results"></tbody>
					</table>
				</div>
			</div>
		</dialog>
		<dialog id="add_ocr_dialog" class="modal">
			<div class="modal-box">
				<form method="dialog">
					<button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
				</form>
				<h3 class="font-bold text-lg">Scan Recipe</h3>
				<form
					class="py-4"
					hx-post="/recipes/add/ocr"
					hx-encoding="multipart/form-data"
					hx-indicator="#fullscreen-loader"
					hx-swap="none"
					_="on submit add_ocr_dialog.close()"
				>
					<div class="grid mb-4">
						<label for="add-ocr-files-input" class="text-sm font-medium mb-1">
							Select your	recipe's images	ordered by page or a recipe document in the PDF format.
						</label>
						<input
							id="add-ocr-files-input"
							type="file"
							name="files"
							accept=".jpg, .jpeg, .png, .bmp, .tiff, .heif, .pdf"
							multiple
							class="p-2 border border-gray-300 rounded-lg shadow focus:ring-2 focus:ring-purple-600 dark:bg-gray-900 dark:border-none"
						/>
					</div>
					<button class="btn btn-block btn-primary btn-sm">
						Submit
					</button>
				</form>
			</div>
		</dialog>
		<dialog id="import_recipes_dialog" class="modal">
			<div class="modal-box">
				<form method="dialog">
					<button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
				</form>
				<h3 class="font-bold text-lg">Import Recipes</h3>
				<form
					class="py-4"
					hx-post="/recipes/add/import"
					enctype="multipart/form-data"
					hx-indicator="#fullscreen-loader"
					hx-swap="none"
				>
					<div class="grid mb-4">
						<label for="import-dialog-file" class="text-sm font-semibold mb-1">
							Choose files in the .json, .txt, .zip or other application format.
						</label>
						<input
							id="import-dialog-file"
							type="file"
							name="files"
							accept=".cml,.crumb,.json,.mxp,.paprikarecipes,.txt,.zip"
							multiple
							class="p-2 border border-gray-300 rounded-lg shadow focus:ring-2 focus:ring-purple-600 dark:bg-gray-900 dark:border-none"
						/>
					</div>
					<button type="submit" class="btn btn-block btn-primary btn-sm" onclick="import_recipes_dialog.close()">
						Submit
					</button>
				</form>
			</div>
		</dialog>
	</div>
}

templ AddRecipeManual(data templates.Data) {
	if data.IsHxRequest {
		<title hx-swap-oob="true">Add Manual | Recipya</title>
		@addRecipeManual(data.View)
	} else {
		@layoutMain("Add Manual", data) {
			@addRecipeManual(data.View)
		}
	}
}

templ addRecipeManual(data *templates.ViewRecipeData) {
	<section class="p-2">
		<div class="flex justify-center">
			<div class="card card-bordered bg-base-100 shadow-none w-full border-gray-700 xl:w-[72rem]">
				<form
					class="card-body"
					style="padding: 0"
					enctype="multipart/form-data"
					hx-post="/recipes/add/manual"
					hx-indicator="#fullscreen-loader"
				>
					<h2 class="card-title bg-base-200 place-content-center rounded-t-2xl">
						<label class="w-full">
							<input
								required
								type="text"
								name="title"
								placeholder="Title of the recipe*"
								autocomplete="off"
								class="input w-full btn-ghost text-center"
							/>
						</label>
					</h2>
					<div>
						<div class="grid md:grid-flow-col md:grid-cols-6">
							<div id="images-container" class="grid grid-flow-col grid-cols-7 w-full text-center border-gray-700 md:grid-cols-6 md:col-span-3 md:border-r">
								<div class="buttons-container flex flex-col gap-1 col-span-2 md:col-span-1 p-1">
									<button
										id="image-button-1"
										type="button"
										class="btn btn-sm btn-ghost btn-active"
										onclick="switchImage(event)"
									>
										Image 1
									</button>
									<button
										id="add-image-button"
										type="button"
										class="btn btn-sm btn-ghost"
										onclick="addImage(event)"
									>
										@iconPlusCircle()
										Add
									</button>
								</div>
								<div id="images" class="col-span-5">
									<label id="image-1">
										<img src="" alt="Image preview of the recipe." class="object-cover mb-2 w-full max-h-[39rem]"/>
										<span class="grid gap-1 max-w-sm" style="margin: auto auto 0.25rem;">
											<div class="mr-1">
												<input
													type="file"
													accept="image/*"
													name="images"
													class="file-input file-input-sm file-input-bordered w-full max-w-sm"
													_="on dragover or dragenter halt the event then set the target's style.background to 'lightgray'
                                                          on dragleave or drop set the target's style.background to ''
                                                          on drop or change
                                                            make an FileReader called reader then
                                                            if event.dataTransfer get event.dataTransfer.files[0] else get event.target.files[0] end then
                                                            set {src: window.URL.createObjectURL(it)} on previous <img/> then
                                                            remove .hidden from me.parentElement.parentElement.querySelectorAll('button') then
                                                            add .hidden to the parentElement of me"
												/>
												<div class="divider">OR</div>
												<span class="hidden input-error"></span>
												<div class="flex">
													<input type="url" placeholder="Enter the URL of an image" class="input input-bordered input-sm w-full max-w-sm mr-1"/>
													<button
														type="button"
														class="btn btn-sm"
														hx-get="/fetch"
														hx-vals="js:{url: event.target.previousElementSibling.value}"
														hx-swap="none"
														_="on htmx:afterRequest
														    if event.detail.successful then
														        set a to first in event.target.parentElement.parentElement.children then
														        call updateImageFromFetch(a, event.detail.xhr.responseURL)
														    end"
													>
														Fetch
													</button>
												</div>
											</div>
											<button
												type="button"
												class="hidden btn btn-sm btn-error btn-outline"
												_="on click
                                                    set {value: ''} on me.parentElement.children[0].children[0] then
                                                    set {src: ''} on previous <img/> then
                                                    set {value: ''} on the first in (last in me.parentElement.children[0].children) then
                                                    remove .hidden from the first in me.parentElement.children then
                                                    add .hidden"
											>
												Delete
											</button>
										</span>
									</label>
								</div>
							</div>
							<div class="grid grid-cols-3 col-span-3 text-sm md:grid-flow-row md:grid-rows-4" style="grid-template-rows: auto">
								<div class="grid col-span-6 pb-2 md:grid-cols-3 md:pb-0 md:border-gray-700 md:border-t">
									<div
										style="display: grid;grid-auto-flow: column;"
										class="grid grid-flow-col grid-cols-3 gap-2 border-b border-t border-gray-700 px-2 md:col-span-2 md:border-b-0 md:border-r md:border-t-0 md:px-0"
									>
										<div class="col-span-2 border-r border-gray-700 pb-2 md:grid md:place-content-center">
											<label class="form-control">
												<div class="label">
													<span class="label-text">Category</span>
												</div>
												<input
													type="text"
													list="categories"
													name="category"
													class="input input-bordered input-sm w-48 md:w-36 lg:w-48"
													placeholder="Breakfast"
													autocomplete="off"
												/>
												<datalist id="categories">
													for _, c := range data.Categories {
														<option>{ c }</option>
													}
												</datalist>
											</label>
										</div>
										<div class="col-span-1 grid place-content-center pb-2 md:content-center lg:md:place-content-center">
											<label class="form-control w-full">
												<div class="label">
													<span class="label-text">Servings</span>
												</div>
												<input
													type="number"
													min="1"
													name="yield"
													value="1"
													class="input input-bordered input-sm w-24 md:w-20 lg:w-24"
												/>
											</label>
										</div>
									</div>
									<div class="relative px-2 pb-2 md:grid md:content-center md:pr-0">
										<label class="form-control w-full">
											<div class="label">
												<span class="label-text">Source</span>
											</div>
											<input
												type="text"
												placeholder="Source"
												name="source"
												class="input input-bordered input-sm md:w-28 lg:w-40 xl:w-44"
											/>
										</label>
										<button
											type="button"
											class="tooltip tooltip-left absolute top-2 right-2"
											_="on click toggle .tooltip-open"
											data-tip="The source can be a website, name of a cookbook, from a relative or friend, a magazine, etc."
										>
											@iconHelp()
										</button>
									</div>
								</div>
								<div class="border-gray-700 border-y col-span-6 md:border-t md:border-b-0 md:grid-cols-3 print:border-none">
									<div class="p-4 flex gap-2 flex-wrap">
										@recipeKeywordEmpty()
									</div>
								</div>
								<div class="grid grid-flow-col col-span-6 border-gray-700 border-y md:grid-cols-2 md:row-span-2">
									<div class="border-r border-gray-700">
										<table class="table table-zebra table-xs md:h-fit">
											<thead>
												<tr>
													<th>Time</th>
													<th>h:m:s</th>
												</tr>
											</thead>
											<tbody>
												<tr>
													<td>Prep</td>
													<td>
														<label>
															<input
																type="text"
																name="time-preparation"
																value="00:15:00"
																class="input input-bordered input-xs max-w-24 html-duration-picker"
															/>
														</label>
													</td>
												</tr>
												<tr>
													<td>Cooking</td>
													<td>
														<label>
															<input
																type="text"
																name="time-cooking"
																value="00:30:00"
																class="input input-bordered input-xs max-w-24 html-duration-picker"
															/>
														</label>
													</td>
												</tr>
											</tbody>
										</table>
									</div>
									<table class="table table-zebra table-xs">
										<thead>
											<tr>
												<th>Nutrition<br/>(per 100g)</th>
												<th>Amount</th>
											</tr>
										</thead>
										<tbody>
											<tr>
												<td>Calories</td>
												<td>
													<label>
														<input
															type="text"
															name="calories"
															autocomplete="off"
															placeholder="368kcal"
															class="input input-bordered input-xs max-w-24"
														/>
													</label>
												</td>
											</tr>
											<tr>
												<td>Total carbs</td>
												<td>
													<label>
														<input
															type="text"
															name="total-carbohydrates"
															autocomplete="off"
															placeholder="35g"
															class="input input-bordered input-xs max-w-24"
														/>
													</label>
												</td>
											</tr>
											<tr>
												<td>Sugars</td>
												<td>
													<label>
														<input
															type="text"
															name="sugars"
															autocomplete="off"
															placeholder="3g"
															class="input input-bordered input-xs max-w-24"
														/>
													</label>
												</td>
											</tr>
											<tr>
												<td>Protein</td>
												<td>
													<label>
														<input
															type="text"
															name="protein"
															autocomplete="off"
															placeholder="21g"
															class="input input-bordered input-xs max-w-24"
														/>
													</label>
												</td>
											</tr>
											<tr>
												<td>Total fat</td>
												<td>
													<label>
														<input
															type="text"
															name="total-fat"
															autocomplete="off"
															placeholder="15g"
															class="input input-bordered input-xs max-w-24"
														/>
													</label>
												</td>
											</tr>
											<tr>
												<td>Saturated fat</td>
												<td>
													<label>
														<input
															type="text"
															name="saturated-fat"
															autocomplete="off"
															placeholder="1.8g"
															class="input input-bordered input-xs max-w-24"
														/>
													</label>
												</td>
											</tr>
											<tr>
												<td>Cholesterol</td>
												<td>
													<label>
														<input
															type="text"
															name="cholesterol"
															autocomplete="off"
															placeholder="1.1mg"
															class="input input-bordered input-xs max-w-24"
														/>
													</label>
												</td>
											</tr>
											<tr>
												<td>Sodium</td>
												<td>
													<label>
														<input
															type="text"
															name="sodium"
															autocomplete="off"
															placeholder="100mg"
															class="input input-bordered input-xs max-w-24"
														/>
													</label>
												</td>
											</tr>
											<tr>
												<td>Fiber</td>
												<td>
													<label>
														<input
															type="text"
															name="fiber"
															autocomplete="off"
															placeholder="8g"
															class="input input-bordered input-xs max-w-24"
														/>
													</label>
												</td>
											</tr>
										</tbody>
									</table>
								</div>
								<div class="col-span-3 min-h-40 md:h-full md:row-span-1">
									<label>
										<textarea
											name="description"
											placeholder="This Thai curry chicken will make you drool."
											class="textarea w-full h-full resize-none"
										></textarea>
									</label>
								</div>
							</div>
						</div>
					</div>
					<div
						id="ingredients-instructions-container"
						class="border-gray-700 md:border-t grid text-sm md:grid-flow-col md:col-span-6"
					>
						<div class="col-span-6 border-gray-700 px-2 py-2 border-y md:col-span-2 md:border-r md:border-y-0">
							<h2 class="font-semibold text-center pb-2">
								<span class="underline">Tools</span>
							</h2>
							<ol id="tools-list" class="pl-4 list-decimal">
								@AddTool(models.HowToItem{})
							</ol>
							<div class="divider"></div>
							<h2 class="font-semibold text-center pb-2">
								<span class="underline">Ingredients</span>
								<sup class="text-red-600">*</sup>
							</h2>
							<ol id="ingredients-list" class="pl-4 list-decimal">
								@AddIngredient("")
							</ol>
						</div>
						<div class="col-span-6 px-6 py-2 border-gray-700 md:rounded-bl-none md:col-span-4">
							<h2 class="font-semibold text-center pb-2">
								<span class="underline">Instructions</span>
								<sup class="text-red-600">*</sup>
							</h2>
							<ol id="instructions-list" class="grid list-decimal">
								@AddInstruction("")
							</ol>
						</div>
					</div>
					<div class="card-actions justify-end">
						<button class="btn btn-primary btn-block btn-sm">Submit</button>
					</div>
				</form>
			</div>
		</div>
	</section>
	@loadRecipesManualScripts()
}

templ AddTool(tool models.HowToItem) {
	<li class="pb-2">
		<div class="grid grid-flow-col items-center">
			<label>
				<input
					type="text"
					name="tools"
					placeholder="1 frying pan"
					class="input input-bordered input-sm w-full"
					if tool.Name != "" {
						value={ tool.StringQuantity() }
					}
					_="on keydown if event.key is 'Enter' halt the event then call addItem(event)"
				/>
			</label>
			<div class="ml-2">
				<button type="button" class="btn btn-square btn-sm btn-outline btn-success" title="Shortcut: Enter" onclick="addItem(event)">
					+
				</button>
				<button
					type="button"
					class="delete-button btn btn-square btn-sm btn-outline btn-error"
					_="on click
					    if (closest <ol/>).childElementCount > 1
					        remove closest <li/>
					    else
					        set input to (closest <li/>).querySelector('input') then
					        set input.value to '' then
					        input.focus()"
				>
					-
				</button>
				<div class="inline-block h-4 cursor-move handle ml-2">
					@iconReorder()
				</div>
			</div>
		</div>
	</li>
}

templ AddIngredient(name string) {
	<li class="pb-2">
		<div class="grid grid-flow-col items-center">
			<label>
				<input
					required
					type="text"
					name="ingredients"
					value={ name }
					placeholder="1 cup of chopped onions"
					class="input input-bordered input-sm w-full"
					_="on keydown if event.key is 'Enter' halt the event then call addItem(event)"
				/>
			</label>
			<div class="ml-2">
				<button type="button" class="btn btn-square btn-sm btn-outline btn-success" title="Shortcut: Enter" onclick="addItem(event)">
					+
				</button>
				<button
					type="button"
					class="delete-button btn btn-square btn-sm btn-outline btn-error"
					_="on click
                        if (closest <ol/>).childElementCount > 1
                            remove closest <li/>
                        else
                            set input to (closest <li/>).querySelector('input') then
                            set input.value to '' then
                            input.focus()"
				>
					-
				</button>
				<div class="inline-block h-4 cursor-move handle ml-2">
					@iconReorder()
				</div>
			</div>
		</div>
	</li>
}

templ AddInstruction(content string) {
	<li class="pt-2 md:pl-0">
		<div class="flex">
			<label class="w-11/12">
				<textarea
					required
					name="instructions"
					rows="3"
					class="textarea textarea-bordered w-full"
					placeholder="Mix all ingredients together"
					_="on keydown if event.key is 'Enter' halt the event then call addItem(event)"
				>{ content }</textarea>
			</label>
			<div class="grid ml-2">
				<button type="button" class="btn btn-square btn-sm btn-outline btn-success" title="Shortcut: CTRL + Enter" onclick="addItem(event)">
					+
				</button>
				<button
					type="button"
					class="delete-button btn btn-square btn-sm btn-outline btn-error"
					_="on click
                        if (closest <ol/>).childElementCount > 1
                            remove closest <li/>
                        else
                            set input to (closest <li/>).querySelector('textarea') then
                            set input.value to '' then
                            input.focus()"
				>
					-
				</button>
				<div class="h-4 cursor-move handle grid place-content-center">
					@iconReorder()
				</div>
			</div>
		</div>
	</li>
}

templ loadRecipesManualScripts() {
	<script defer>
        loadScript("https://cdn.jsdelivr.net/npm/html-duration-picker@latest/dist/html-duration-picker.min.js")
            .then(() => HtmlDurationPicker.init())

        loadScript("https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js")
            .then(() => {
                const inputs = [
                    {name: 'tool', type: 'input'},
                    {name: 'ingredient', type: 'input'},
                    {name: 'instruction', type: 'textarea'},
                ];
                inputs.forEach(({name, type}) => {
                    const list = document.querySelector(`#${name}s-list`);
                    if (list) {
                        new Sortable.create(list, {
                            handle: '.handle',
                            animation: 150,
                        });
                    }
                });
            });

        function addImage(event) {
            const images = document.querySelectorAll("#images label");
            for (let i = 0; i < images.length; i++) {
                if (images[i].querySelector('input[type="file"]').files.length === 0) {
                    alert(`Please select an image for 'Image ${i+1}'`);
                    return;
                }
            }

            const buttons = document.querySelectorAll(".buttons-container button");
            buttons.forEach(el => el.classList.remove("btn-active"));

            const cloneImage = images[images.length-1].cloneNode(true);
            images.forEach(label => label.classList.add("hidden"));
            cloneImage.querySelector("input").value = '';
            cloneImage.id = `image-${images.length+1}`;
            cloneImage.querySelector("img").src = "";
            cloneImage.querySelector("div").classList.remove("hidden");
            cloneImage.querySelector("input[type='url']").value = '';
            const subButtons = cloneImage.querySelectorAll("button");
            subButtons[subButtons.length-1].classList.add("hidden");
            document.querySelector("#images").appendChild(cloneImage);
            _hyperscript.processNode(cloneImage);

            let target = event.target;
            if (target.tagName === "svg") {
                target = event.target.parentElement;
            }

            const cloneButton = target.previousElementSibling.cloneNode(true);
            cloneButton.id = `image-button-${buttons.length}`;
            cloneButton.classList.add("btn-active");
            cloneButton.textContent = `Image ${buttons.length}`;
            cloneButton.setAttribute("onclick", "switchImage(event)");
            target.previousElementSibling.parentNode.insertBefore(cloneButton, target);
            _hyperscript.processNode(cloneButton);
            htmx.process(cloneImage);
        }

        function addKeyword(event) {
            const input = document.querySelector("#new_keyword")
            const keyword = input.value.trim();
            if (keyword === "") {
                return;
            }

            const div = document.querySelector("#hidden_keyword").cloneNode(true);
            div.classList.remove("hidden");
            div.querySelector("input").value = keyword;
            div.querySelector("span").textContent = keyword;
            _hyperscript.processNode(div);
            htmx.process(div);

            const container = document.querySelector("#empty_keyword");
            container.parentNode.insertBefore(div, container);

            input.value = '';
            input.focus();
        }

        function switchImage(event) {
            let target = event.target;
            if (target.tagName === "svg") {
                target = event.target.parentElement;
            }

            const images = document.querySelectorAll("#images label");
            for (let i = 0; i < images.length; i++) {
                if (images[i].id === target.id.replace("button-", "")) {
                    images.forEach(label => label.classList.add("hidden"));
                    images[i].classList.remove("hidden");
                    document.querySelectorAll(".buttons-container button").forEach(el => el.classList.remove("btn-active"));
                    document.getElementById(event.target.id).classList.add("btn-active");
                    return;
                }
            }
        }

        function isUrl(event) {
            let url;
            try {
                url = new URL(event.target.previousElementSibling.value);
            } catch (_) {
                return false;
            }
            return url.protocol === "http:" || url.protocol === "https:";
        }

        function updateImageFromFetch(input, url) {
            if (url === window.location.href) {
                input.value = '';
                return;
            }

            const pathRegex = /^\/data\/images\/([\da-z]{8}-([\da-z]{4}-){3}[\da-z]{12}).webp$/;
            const urlObject = new URL(url);

            let uuid;
            if (pathRegex.test(urlObject.pathname)) {
                uuid = urlObject.pathname.match(pathRegex)[1];
            } else {
                uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                     const r = Math.random() * 16 | 0;
                     const v = c === 'x' ? r : (r & 0x3 | 0x8);
                     return v.toString(16);
                 });
            }

            fetch(url)
                .then(response => response.blob())
                .then(blob => {
                    const file = new File([blob], uuid, { type: blob.type });
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(file);
                    input.files = dataTransfer.files;
                    input.dispatchEvent(new Event('change'));
                });
        }

        function addItem(event) {
            const ol = event.target.closest('ol');
            const items = ol.querySelectorAll('li');

            for (let i = 0; i < items.length; i++) {
                let input = items[i].querySelector('input');
                if (!input) {
                    input = items[i].querySelector('textarea');
                }

                if (input.value === '') {
                    return;
                }
            }

            const clone = event.target.closest('li').cloneNode(true);
            let el = 'input';

            try {
                clone.querySelector(el).value = '';
            } catch {
                el = 'textarea';
                clone.querySelector(el).value = '';
            }

            _hyperscript.processNode(clone);
            htmx.process(clone);
            ol.appendChild(clone);

            clone.querySelector(el).focus();
        }
    </script>
}

templ EditRecipe(data templates.Data) {
	if data.IsHxRequest {
		<title hx-swap-oob="true">Edit { data.View.Recipe.Name } | Recipya</title>
		@editRecipe(data.View)
	} else {
		@layoutMain(fmt.Sprintf("Edit %s", data.View.Recipe.Name), data) {
			@editRecipe(data.View)
		}
	}
}

templ editRecipe(data *templates.ViewRecipeData) {
	<section class="p-2">
		<div class="flex justify-center">
			<div class="card card-bordered bg-base-100 shadow-none w-full border-gray-700 xl:w-[72rem]">
				<form
					class="card-body"
					style="padding: 0"
					hx-put={ fmt.Sprintf("/recipes/%d/edit", data.ID) }
					enctype="multipart/form-data"
				>
					<h2 class="card-title bg-base-200 place-content-center rounded-t-2xl">
						<button
							class="btn btn-ghost"
							title="Back to view recipe"
							type="button"
							_="on click if confirm('Are you sure you wish to go back? Changes will not be saved.') then call history.back()"
						>
							@iconArrowLeftCircle()
						</button>
						<label class="w-full">
							<input
								required
								type="text"
								name="title"
								placeholder="Title of the recipe*"
								autocomplete="off"
								class="input w-full btn-ghost text-center"
								value={ data.Recipe.Name }
							/>
						</label>
					</h2>
					<div>
						<div class="grid md:grid-flow-col md:grid-cols-6">
							<div id="images-container" class="grid grid-flow-col grid-cols-7 w-full text-center border-gray-700 md:grid-cols-6 md:col-span-3 md:border-r">
								<div class="buttons-container flex flex-col gap-1 col-span-2 md:col-span-1 p-1">
									if len(data.Recipe.Images) == 0 {
										<button
											id="image-button-1"
											type="button"
											class="btn btn-sm btn-ghost btn-active"
											onclick="switchImage(event)"
										>
											Image 1
										</button>
									} else {
										for i := range data.Recipe.Images {
											<button
												id={ "image-button-" + strconv.Itoa(i+1) }
												type="button"
												class={ "btn btn-sm btn-ghost", templ.KV("btn-active", i==0) }
												onclick="switchImage(event)"
											>
												{ "Image "+strconv.Itoa(i+1) }
											</button>
										}
									}
									<button
										id="add-image-button"
										type="button"
										class="btn btn-sm btn-ghost"
										onclick="addImage(event)"
									>
										@iconPlusCircle()
										Add
									</button>
								</div>
								<div id="images" class="col-span-5">
									if len(data.Recipe.Images) == 0 {
										<label id="image-1">
											<img src="" alt="Image preview of the recipe." class="object-cover mb-2 w-full max-h-[39rem]"/>
											<span class="grid gap-1 max-w-sm" style="margin: auto auto 0.25rem;">
												<div class="mr-1">
													<input
														type="file"
														accept="image/*"
														name="images"
														class="file-input file-input-sm file-input-bordered w-full max-w-sm"
														_="on dragover or dragenter halt the event then set the target's style.background to 'lightgray'
                                                              on dragleave or drop set the target's style.background to ''
                                                              on drop or change
                                                                make an FileReader called reader then
                                                                if event.dataTransfer get event.dataTransfer.files[0] else get event.target.files[0] end then
                                                                set {src: window.URL.createObjectURL(it)} on previous <img/> then
                                                                remove .hidden from me.parentElement.parentElement.querySelectorAll('button') then
                                                                add .hidden to the parentElement of me"
													/>
													<div class="divider">OR</div>
													<span class="hidden input-error"></span>
													<div class="flex">
														<input type="url" placeholder="Enter the URL of an image" class="input input-bordered input-sm w-full max-w-sm mr-1"/>
														<button
															type="button"
															class="btn btn-sm"
															hx-get="/fetch"
															hx-vals="js:{url: event.target.previousElementSibling.value}"
															hx-swap="none"
															_="on htmx:afterRequest
                                                                if event.detail.successful then
                                                                    set a to first in event.target.parentElement.parentElement.children then
                                                                    call updateImageFromFetch(a, event.detail.xhr.responseURL)
                                                                end"
														>
															Fetch
														</button>
													</div>
												</div>
												<button
													type="button"
													class="hidden btn btn-sm btn-error btn-outline"
													_="on click
                                                        set {value: ''} on me.parentElement.children[0].children[0] then
                                                        set {src: ''} on previous <img/> then
                                                        set {value: ''} on the first in (last in me.parentElement.children[0].children) then
                                                        remove .hidden from the first in me.parentElement.children then
                                                        add .hidden"
												>
													Delete
												</button>
											</span>
										</label>
									} else {
										for i, image := range data.Recipe.Images {
											<label id={ "image-" + strconv.Itoa(i+1) } class={ templ.KV("hidden", i > 0) }>
												<img
													alt="Image preview of the recipe."
													class="object-cover mb-2 w-full max-h-[39rem]"
													if data.IsImagesExist[i] {
														src={ fmt.Sprintf("/data/images/%s.webp", image) }
													} else {
														src=""
													}
												/>
												<span class="grid gap-1 max-w-sm" style="margin: auto auto 0.25rem;">
													<div class={ "mr-1", templ.KV("hidden", i > 0) }>
														<input
															type="file"
															accept="image/*"
															name="images"
															class="file-input file-input-sm file-input-bordered w-full max-w-sm"
															value={ fmt.Sprintf("/data/images/%s.webp", image) }
															_="on dragover or dragenter halt the event then set the target's style.background to 'lightgray'
                                                              on dragleave or drop set the target's style.background to ''
                                                              on drop or change
                                                                make an FileReader called reader then
                                                                if event.dataTransfer get event.dataTransfer.files[0] else get event.target.files[0] end then
                                                                set {src: window.URL.createObjectURL(it)} on previous <img/> then
                                                                remove .hidden from me.parentElement.parentElement.querySelectorAll('button') then
                                                                add .hidden to the parentElement of me"
														/>
														<div class="divider">OR</div>
														<span class="hidden input-error"></span>
														<div class="flex">
															<input type="url" placeholder="Enter the URL of an image" class="input input-bordered input-sm w-full max-w-sm mr-1"/>
															<button
																type="button"
																class="btn btn-sm"
																hx-get="/fetch"
																hx-vals="js:{url: event.target.previousElementSibling.value}"
																hx-swap="none"
																_="on htmx:afterRequest
                                                                    if event.detail.successful then
                                                                        set a to first in event.target.parentElement.parentElement.children then
                                                                        call updateImageFromFetch(a, event.detail.xhr.responseURL)
                                                                    end"
															>
																Fetch
															</button>
														</div>
													</div>
													<button
														type="button"
														class={ "btn btn-sm btn-error btn-outline", templ.KV("hidden", !data.IsImagesExist[i]) }
														_="on click
                                                            set {value: ''} on me.parentElement.children[0].children[0] then
                                                            set {src: ''} on previous <img/> then
                                                            set {value: ''} on the first in (last in me.parentElement.children[0].children) then
                                                            remove .hidden from the first in me.parentElement.children then
                                                            add .hidden"
													>
														Delete
													</button>
												</span>
											</label>
										}
									}
								</div>
							</div>
							<div class="grid grid-cols-3 col-span-3 text-sm md:grid-flow-row md:grid-rows-4" style="grid-template-rows: auto">
								<div class="grid col-span-6 pb-2 md:grid-cols-3 md:pb-0 md:border-gray-700 md:border-t">
									<div
										style="display: grid;grid-auto-flow: column;"
										class="grid grid-flow-col grid-cols-3 gap-2 border-b border-t border-gray-700 px-2 md:col-span-2 md:border-b-0 md:border-r md:border-t-0 md:px-0"
									>
										<div class="col-span-2 border-r border-gray-700 pb-2 md:pb-0 md:grid md:place-content-center">
											<label class="form-control">
												<div class="label">
													<span class="label-text">
														Category
														<sup class="text-red-600">*</sup>
													</span>
												</div>
												<input
													type="text"
													list="categories"
													name="category"
													class="input input-bordered input-sm w-48 md:w-36 lg:w-48"
													placeholder="Breakfast"
													autocomplete="off"
													value={ data.Recipe.Category }
												/>
												<datalist id="categories">
													for _, c := range data.Categories {
														<option>{ c }</option>
													}
												</datalist>
											</label>
										</div>
										<div class="col-span-1 grid place-content-center pb-2 md:p-2 md:content-center lg:md:place-content-center">
											<label class="form-control w-full">
												<div class="label">
													<span class="label-text">Servings</span>
												</div>
												<input
													type="number"
													min="1"
													name="yield"
													class="input input-bordered input-sm w-24 md:w-20 lg:w-24"
													if data.Recipe.Yield == 0 {
														value="4"
													} else {
														value={ fmt.Sprint(data.Recipe.Yield) }
													}
												/>
											</label>
										</div>
									</div>
									<div class="relative px-2 md:grid md:content-center md:pr-0">
										<label class="form-control w-full">
											<div class="label">
												<span class="label-text">
													Source
													<sup class="text-red-600">*</sup>
												</span>
											</div>
											<input
												type="text"
												placeholder="Source"
												name="source"
												class="input input-bordered input-sm md:w-28 lg:w-40 xl:w-44"
												value={ data.Recipe.URL }
											/>
										</label>
										<button
											type="button"
											class="tooltip tooltip-left absolute top-2 right-2"
											_="on click toggle .tooltip-open"
											data-tip="The source can be a website, name of a cookbook, from a relative or friend, a magazine, etc."
										>
											@iconInformation()
										</button>
									</div>
								</div>
								<div class="border-gray-700 border-y col-span-6 md:border-t md:border-b-0 md:grid-cols-3 print:border-none">
									<div class="p-4 flex gap-2 flex-wrap">
										for _, kw := range data.Recipe.Keywords {
											<div class="badge badge-sm badge-neutral p-3 pr-0">
												<input type="hidden" name="keywords" value={ kw }/>
												<span class="select-none">{ kw }</span>
												<button type="button" class="btn btn-xs btn-ghost" _="on click remove closest <div/>">X</button>
											</div>
										}
										@recipeKeywordEmpty()
									</div>
								</div>
								<div class="grid grid-flow-col col-span-6 border-gray-700 border-y md:grid-cols-2 md:row-span-2">
									<div class="border-r border-gray-700">
										<table class="table table-zebra table-xs md:h-fit">
											<thead>
												<tr>
													<th>Time</th>
													<th>h:m:s</th>
												</tr>
											</thead>
											<tbody>
												<tr>
													<td>Prep</td>
													<td>
														<label>
															<input
																type="text"
																name="time-preparation"
																class="input input-bordered input-xs max-w-24 html-duration-picker"
																if data.FormattedTimes.PrepEdit != "" {
																	value={ data.FormattedTimes.PrepEdit }
																} else {
																	value="00:15:00"
																}
															/>
														</label>
													</td>
												</tr>
												<tr>
													<td>Cooking</td>
													<td>
														<label>
															<input
																type="text"
																name="time-cooking"
																class="input input-bordered input-xs max-w-24 html-duration-picker"
																if data.FormattedTimes.CookEdit != "" {
																	value={ data.FormattedTimes.CookEdit }
																} else {
																	value="00:30:00"
																}
															/>
														</label>
													</td>
												</tr>
											</tbody>
										</table>
									</div>
									<table class="table table-zebra table-xs">
										<thead>
											<tr>
												<th>Nutrition<br/>(per 100g)</th>
												<th>Amount</th>
											</tr>
										</thead>
										<tbody>
											<tr>
												<td>Calories</td>
												<td>
													<label>
														<input
															type="text"
															name="calories"
															autocomplete="off"
															placeholder="368kcal"
															class="input input-bordered input-xs max-w-24"
															value={ data.Recipe.Nutrition.Calories }
														/>
													</label>
												</td>
											</tr>
											<tr>
												<td>Total carbs</td>
												<td>
													<label>
														<input
															type="text"
															name="total-carbohydrates"
															autocomplete="off"
															placeholder="35g"
															class="input input-bordered input-xs max-w-24"
															value={ data.Recipe.Nutrition.TotalCarbohydrates }
														/>
													</label>
												</td>
											</tr>
											<tr>
												<td>Sugars</td>
												<td>
													<label>
														<input
															type="text"
															name="sugars"
															autocomplete="off"
															placeholder="3g"
															class="input input-bordered input-xs max-w-24"
															value={ data.Recipe.Nutrition.Sugars }
														/>
													</label>
												</td>
											</tr>
											<tr>
												<td>Protein</td>
												<td>
													<label>
														<input
															type="text"
															name="protein"
															autocomplete="off"
															placeholder="21g"
															class="input input-bordered input-xs max-w-24"
															value={ data.Recipe.Nutrition.Protein }
														/>
													</label>
												</td>
											</tr>
											<tr>
												<td>Total fat</td>
												<td>
													<label>
														<input
															type="text"
															name="total-fat"
															autocomplete="off"
															placeholder="15g"
															class="input input-bordered input-xs max-w-24"
															value={ data.Recipe.Nutrition.TotalFat }
														/>
													</label>
												</td>
											</tr>
											<tr>
												<td>Saturated fat</td>
												<td>
													<label>
														<input
															type="text"
															name="saturated-fat"
															autocomplete="off"
															placeholder="1.8g"
															class="input input-bordered input-xs max-w-24"
															value={ data.Recipe.Nutrition.SaturatedFat }
														/>
													</label>
												</td>
											</tr>
											<tr>
												<td>Cholesterol</td>
												<td>
													<label>
														<input
															type="text"
															name="cholesterol"
															autocomplete="off"
															placeholder="1.1mg"
															class="input input-bordered input-xs max-w-24"
															value={ data.Recipe.Nutrition.Cholesterol }
														/>
													</label>
												</td>
											</tr>
											<tr>
												<td>Sodium</td>
												<td>
													<label>
														<input
															type="text"
															name="sodium"
															autocomplete="off"
															placeholder="100mg"
															class="input input-bordered input-xs max-w-24"
															value={ data.Recipe.Nutrition.Sodium }
														/>
													</label>
												</td>
											</tr>
											<tr>
												<td>Fiber</td>
												<td>
													<label>
														<input
															type="text"
															name="fiber"
															autocomplete="off"
															placeholder="8g"
															class="input input-bordered input-xs max-w-24"
															value={ data.Recipe.Nutrition.Fiber }
														/>
													</label>
												</td>
											</tr>
										</tbody>
									</table>
								</div>
								<div class="col-span-3 min-h-40 md:h-full md:row-span-1">
									<label>
										<textarea
											name="description"
											placeholder="This Thai curry chicken will make you drool."
											class="textarea w-full h-full resize-none"
										>{ data.Recipe.Description }</textarea>
									</label>
								</div>
							</div>
						</div>
					</div>
					<div
						id="ingredients-instructions-container"
						class="border-gray-700 md:border-t grid text-sm md:grid-flow-col md:col-span-6"
					>
						<div class="col-span-6 border-gray-700 px-2 py-2 border-y md:col-span-2 md:border-r md:border-y-0">
							<h2 class="font-semibold text-center pb-2 underline">Tools</h2>
							<ol id="tools-list" class="pl-4 list-decimal">
								if len(data.Recipe.Tools) == 0 {
									@AddTool(models.HowToItem{})
								} else {
									for _, t := range data.Recipe.Tools {
										@AddTool(t)
									}
								}
							</ol>
							<h2 class="font-semibold text-center pb-2">
								<span class="underline">Ingredients</span>
								<sup class="text-red-600">*</sup>
							</h2>
							<ol id="ingredients-list" class="pl-4 list-decimal">
								if len(data.Recipe.Ingredients) == 0 {
									@AddIngredient("")
								} else {
									for _, v := range data.Recipe.Ingredients {
										@AddIngredient(v)
									}
								}
							</ol>
						</div>
						<div class="col-span-6 px-6 py-2 border-gray-700 md:rounded-bl-none md:col-span-4">
							<h2 class="font-semibold text-center pb-2">
								<span class="underline">Instructions</span>
								<sup class="text-red-600">*</sup>
							</h2>
							<ol id="instructions-list" class="grid list-decimal">
								if len(data.Recipe.Instructions) == 0 {
									@AddInstruction("")
								} else {
									for _, v := range data.Recipe.Instructions {
										@AddInstruction(v)
									}
								}
							</ol>
						</div>
					</div>
					<div class="card-actions justify-end">
						<button type="submit" class="btn btn-primary btn-block btn-sm">Submit</button>
					</div>
				</form>
			</div>
		</div>
	</section>
	@loadRecipesManualScripts()
	<script defer>
	    function initEditImages() {
	        document.querySelectorAll("#images label").forEach(el => {
                updateImageFromFetch(el.querySelector("input[type='file']"), el.querySelector("img").src);
	        });
	    }

        initEditImages();
	</script>
}

templ RecipesIndex(data templates.Data) {
	if data.IsHxRequest {
		<title hx-swap-oob="true">Recipes | Recipya</title>
		@recipesIndex(data)
	} else {
		@layoutMain("Recipes", data) {
			@recipesIndex(data)
		}
	}
}

templ recipesIndex(data templates.Data) {
	if len(data.Recipes) > 0 {
		<div class="flex flex-col">
			<section class="grid justify-center px-4 pt-4">
				<search>
					<form
						class="w-72 flex md:w-96"
						hx-get="/recipes/search"
						hx-vals={ fmt.Sprintf(`{"page": %d}`, data.Pagination.Search.CurrentPage) }
						hx-target="#list-recipes"
						hx-push-url="true"
						hx-trigger="submit, change target:.sort-option"
					>
						@searchbar(data.Searchbar)
					</form>
				</search>
			</section>
		</div>
		@searchHelp()
		<div id="list-recipes" class="min-h-[79vh]">
			@ListRecipes(data)
		</div>
		@Pagination(data.Pagination)
	} else {
		<div class="grid place-content-center text-sm h-full text-center md:text-base">
			<div class="p-4 md:p-0">
				<p class="pb-2">Your recipe collection looks a bit empty at the moment.</p>
				<p>
					Why not start adding recipes by clicking the
					<a class="underline font-semibold cursor-pointer" hx-get="/recipes/add" hx-target="#content" hx-push-url="true">Add recipe</a>
					button at the top?
				</p>
			</div>
		</div>
	}
}

templ ListRecipes(data templates.Data) {
	if data.IsHxRequest {
		<input
			hx-swap-oob="true"
			type="search"
			id="search_recipes"
			name="q"
			class="w-full"
			placeholder="Search for recipes..."
			value={ data.Searchbar.Term }
			_="on keyup
               if event.target.value !== '' then
                   remove .md:block from #search_shortcut
               else
                   add .md:block to #search_shortcut then
                   if (event.key is not 'Delete' and not event.key.startsWith('Arrow')) then
                       send submit to closest <form/> then
                   end
               end"
		/>
	}
	<article class="grid gap-4 p-4 text-sm place-items-center grid-cols-1 sm:grid-cols-2 md:m-auto md:max-w-7xl md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 md:text-base">
		for _, r := range data.Recipes {
			<section class="card-side sm:card card-compact card-bordered bg-base-100 shadow-lg indicator w-full">
				<span class="hidden sm:block">
					@categoryBadge(r.Category, false)
				</span>
				<figure class="relative cursor-pointer" hx-get={ fmt.Sprintf("/recipes/%d", r.ID) } hx-target="#content" hx-push-url="true" hx-trigger="mousedown" hx-swap="innerHTML show:window:top transition:true">
					<img
						class="h-28 w-24 object-cover rounded-t-lg sm:h-40 sm:min-w-full sm:w-full"
						if len(r.Images) > 0 && data.Functions.IsUUIDValid(r.Images[0]) && data.Functions.IsImageExists(r.Images[0]) {
							src={ fmt.Sprintf("/data/images/thumbnails/%s.webp", r.Images[0]) }
						} else {
							src="/static/img/recipes/placeholder.webp"
						}
						alt={ "Image for the " + r.Name + " recipe" }
					/>
					<div class="hidden absolute inset-0 bg-black opacity-0 hover:opacity-80 transition-opacity duration-300 items-center justify-center text-white select-none rounded-t-lg sm:flex">
						<p class="p-2 text-sm">{ data.Functions.CutString(r.Description, 127) }</p>
					</div>
				</figure>
				<div class="card-body justify-between">
					<h2 class={ "sm:font-semibold sm:w-[25ch] sm:break-words sm:min-h-14", templ.KV("sm:min-h-28", len(r.Keywords) == 0) }>
						{ r.Name }
					</h2>
					<div class={ "sm:max-h-14 sm:overflow-y-auto sm:content-end", templ.KV("sm:min-h-14", len(r.Keywords) > 0) }>
						<div class="flex flex-col flex-wrap overflow-x-auto max-h-12 pb-2 sm:pb-0 sm:max-h-none sm:flex-auto sm:flex-row">
							<span class="sm:hidden">
								@categoryBadge(r.Category, true)
							</span>
							for _, kw := range r.Keywords {
								<span
									class="badge badge-neutral badge-sm select-none p-2 m-1 cursor-pointer"
									hx-get="/recipes/search"
									hx-target="#list-recipes"
									hx-push-url="true"
									hx-swap="innerHTML show:window:top transition:true"
									hx-vals={ fmt.Sprintf(`{"q": "tag:%s"}`, kw) }
									_={ fmt.Sprintf("on click put \"tag:%s\" into #search_recipes.value", kw) }
								>
									{ kw }
								</span>
							}
						</div>
					</div>
					<div class="card-actions flex-col-reverse h-fit">
						<button class="btn btn-block btn-xs btn-outline sm:btn-sm" hx-get={ fmt.Sprintf("/recipes/%d", r.ID) } hx-target="#content" hx-trigger="mousedown" hx-push-url="true" hx-swap="innerHTML show:window:top transition:true">
							View
						</button>
					</div>
				</div>
			</section>
		}
	</article>
}

templ categoryBadge(category string, isInCard bool) {
	if len(strings.Split(category, ":")) == 1 {
		<span
			class={ "badge badge-primary select-none cursor-pointer badge-sm p-2 m-1 sm:badge-md sm:m-0 hover:bg-neutral", templ.KV("indicator-item indicator-center", !isInCard) }
			hx-get="/recipes/search"
			hx-target="#list-recipes"
			hx-push-url="true"
			hx-swap="innerHTML show:window:top transition:true"
			hx-vals={ fmt.Sprintf(`{"q": "cat:%s"}`, category) }
			_={ fmt.Sprintf("on click put \"cat:%s\" into #search_recipes.value", category) }
		>
			{ category }
		</span>
	} else {
		<span class={ "badge badge-primary select-none cursor-pointer", templ.KV("indicator-item indicator-center", !isInCard) }>
			for i, subCat := range strings.Split(category, ":") {
				if i > 0 {
					:
				}
				<span
					class="hover:bg-neutral"
					hx-get="/recipes/search"
					hx-target="#list-recipes"
					hx-push-url="true"
					hx-swap="innerHTML show:window:top transition:true"
					hx-vals={ fmt.Sprintf(`{"q": "cat:%s"}`, subCat) }
					_={ fmt.Sprintf("on click put 'cat:%s' into #search_recipes.value", subCat) }
				>{ subCat }</span>
			}
		</span>
	}
}

templ ViewRecipe(data templates.Data) {
	if data.IsHxRequest {
		<title hx-swap-oob="true">{ data.View.Recipe.Name } | Recipya</title>
		@viewRecipe(data.View, data.IsAuthenticated)
	} else {
		@layoutMain(data.View.Recipe.Name, data) {
			@viewRecipe(data.View, data.IsAuthenticated)
		}
	}
}

templ viewRecipe(data *templates.ViewRecipeData, isAuthenticated bool) {
	if !data.Share.IsShared {
		<dialog id="share_dialog" class="modal">
			<div class="modal-box w-96">
				<div id="share-dialog-result"></div>
				<div class="modal-action block mt-4">
					<form method="dialog">
						<button class="btn btn-block btn-outline btn-sm">Close</button>
					</form>
				</div>
			</div>
		</dialog>
	}
	<section class="p-2">
		<div class="flex justify-center">
			<div class="card card-bordered bg-base-100 shadow-none w-full border-gray-700 xl:w-[72rem] print:rounded-none">
				<div class="card-body" style="padding: 0">
					<h2
						class="card-title bg-base-200 px-2 pt-2 place-content-center rounded-t-2xl print:border-b print:border-black"
						style="justify-content: space-between"
					>
						<span class="grid grid-flow-col place-items-center pb-2 print:hidden">
							<button
								title="Toggle screen lock"
								_="on load if not navigator.wakeLock hide me end
                                       on click
                                       if wakeLock wakeLock.release() then
                                            add @d='M 12.276 18.55 v -0.748 a 4.79 4.79 0 0 1 1.463 -3.458 a 5.763 5.763 0 0 0 1.804 -4.21 a 5.821 5.821 0 0 0 -6.475 -5.778 c -2.779 0.307 -4.99 2.65 -5.146 5.448 a 5.82 5.82 0 0 0 1.757 4.503 a 4.906 4.906 0 0 1 1.5 3.495 v 0.747 a 1.44 1.44 0 0 0 1.44 1.439 h 2.218 a 1.44 1.44 0 0 0 1.44 -1.439 z m -1.058 0 c 0 0.209 -0.17 0.38 -0.38 0.38 h -2.22 c -0.21 0 -0.38 -0.171 -0.38 -0.38 v -0.748 c 0 -1.58 -0.664 -3.13 -1.822 -4.254 A 4.762 4.762 0 0 1 4.98 9.863 c 0.127 -2.289 1.935 -4.204 4.205 -4.455 a 4.762 4.762 0 0 1 5.3 4.727 a 4.714 4.714 0 0 1 -1.474 3.443 a 5.853 5.853 0 0 0 -1.791 4.225 v 0.746 z M 11.45 20.51 H 8.006 a 0.397 0.397 0 1 0 0 0.795 h 3.444 a 0.397 0.397 0 1 0 0 -0.794 z M 11.847 22.162 a 0.397 0.397 0 0 0 -0.397 -0.397 H 8.006 a 0.397 0.397 0 1 0 0 0.794 h 3.444 c 0.22 0 0.397 -0.178 0.397 -0.397 z z z z z z z z M 10.986 23.416 H 8.867 a 0.397 0.397 0 1 0 0 0.794 h 1.722 c 0.22 0 0.397 -0.178 0.397 -0.397 z' to #icon-bulb
                                       else
                                            call initWakeLock() then
                                            add @d='M12.276 18.55v-.748a4.79 4.79 0 0 1 1.463-3.458 5.763 5.763 0 0 0 1.804-4.21 5.821 5.821 0 0 0-6.475-5.778c-2.779.307-4.99 2.65-5.146 5.448a5.82 5.82 0 0 0 1.757 4.503 4.906 4.906 0 0 1 1.5 3.495v.747a1.44 1.44 0 0 0 1.44 1.439h2.218a1.44 1.44 0 0 0 1.44-1.439zm-1.058 0c0 .209-.17.38-.38.38h-2.22c-.21 0-.38-.171-.38-.38v-.748c0-1.58-.664-3.13-1.822-4.254A4.762 4.762 0 0 1 4.98 9.863c.127-2.289 1.935-4.204 4.205-4.455a4.762 4.762 0 0 1 5.3 4.727 4.714 4.714 0 0 1-1.474 3.443 5.853 5.853 0 0 0-1.791 4.225v.746zM11.45 20.51H8.006a.397.397 0 1 0 0 .795h3.444a.397.397 0 1 0 0-.794zM11.847 22.162a.397.397 0 0 0-.397-.397H8.006a.397.397 0 1 0 0 .794h3.444c.22 0 .397-.178.397-.397zM.397 10.125h2.287a.397.397 0 1 0 0-.794H.397a.397.397 0 1 0 0 .794zM19.456 9.728a.397.397 0 0 0-.397-.397h-2.287a.397.397 0 1 0 0 .794h2.287c.22 0 .397-.178.397-.397zM9.331.397v2.287a.397.397 0 1 0 .794 0V.397a.397.397 0 1 0-.794 0zM16.045 2.85 14.43 4.465a.397.397 0 1 0 .561.561l1.617-1.617a.397.397 0 1 0-.562-.56zM5.027 14.429a.397.397 0 0 0-.56 0l-1.618 1.616a.397.397 0 1 0 .562.562l1.617-1.617a.397.397 0 0 0 0-.561zM4.466 5.027a.396.396 0 0 0 .562 0 .397.397 0 0 0 0-.56L3.41 2.848a.397.397 0 1 0-.561.561zM16.045 16.607a.396.396 0 0 0 .562 0 .397.397 0 0 0 0-.562L14.99 14.43a.397.397 0 1 0-.561.56zM10.986 23.416a.397.397 0 0 0-.397-.397H8.867a.397.397 0 1 0 0 .794h1.722c.22 0 .397-.178.397-.397z' to #icon-bulb
                                       end"
							>
								@iconBulbOn()
							</button>
							if isAuthenticated && data.Share.IsFromHost {
								<button
									class="ml-2"
									title="Edit recipe"
									hx-get={ fmt.Sprintf("/recipes/%d/edit", data.ID) }
									hx-push-url="true"
									hx-target="#content"
									hx-swap="innerHTML transition:true"
								>
									@iconEdit()
								</button>
							}
						</span>
						<span class="text-center pb-2 print:w-full">{ data.Recipe.Name }</span>
						<span class="grid grid-flow-col place-items-center pb-2 print:hidden">
							if data.Share.IsShared {
								if !data.Share.IsFromHost {
									<button
										class="mr-2"
										title="Add recipe to collection"
										hx-get={ fmt.Sprintf("/recipes/%d/share/add", data.ID) }
										hx-push-url="true"
									>
										@iconPlusCircle()
									</button>
								}
							} else {
								<button
									class="mr-2"
									title="Share recipe"
									hx-post={ fmt.Sprintf("/recipes/%d/share", data.ID) }
									hx-target="#share-dialog-result"
									_="on htmx:afterRequest from me if event.detail.successful call share_dialog.showModal()"
								>
									@iconShare()
								</button>
							}
							<button class="mr-2" title="Print recipe" _="on click print()">
								@iconPrint()
							</button>
							if data.Share.IsFromHost {
								<button
									class="mr-2"
									hx-delete={ fmt.Sprintf("/recipes/%d", data.Recipe.ID) }
									hx-swap="none"
									title="Delete recipe"
									hx-confirm="Are you sure you wish to delete this recipe?"
									hx-indicator="#fullscreen-loader"
								>
									@iconDelete()
								</button>
							}
						</span>
					</h2>
					<div class="grid md:grid-flow-col md:grid-cols-6">
						<div class="w-[95vw] md:w-full text-center border-b border-gray-700 md:col-span-3 md:border-r md:border-b-0 flex items-center justify-center print:hidden">
							switch len(data.Recipe.Images) {
								case 0:
									<img
										style="object-fit: cover"
										alt="Image of the recipe"
										class="w-full max-h-80 md:max-h-[34rem]"
										src="/static/img/recipes/placeholder.webp"
									/>
								case 1:
									<img
										id="output"
										style="object-fit: cover"
										alt="Image of the recipe"
										class="w-full max-h-80  md:max-h-[34rem]"
										if data.IsImagesExist[0] {
											src={ fmt.Sprintf("/data/images/%s.webp", data.Recipe.Images[0]) }
										} else {
											src="/static/img/recipes/placeholder.webp"
										}
									/>
								default:
									<div class="carousel w-full">
										for i := 0; i < len(data.Recipe.Images); i++ {
											<div id={ "image-" + strconv.Itoa(i) } class="carousel-item relative w-full">
												<img
													style="object-fit: cover"
													alt="Image of the recipe"
													class="w-full max-h-80  md:max-h-[34rem]"
													if data.IsImagesExist[i] {
														src={ fmt.Sprintf("/data/images/%s.webp", data.Recipe.Images[i]) }
													} else {
														src="/static/img/recipes/placeholder.webp"
													}
												/>
												<div class="absolute flex justify-between transform -translate-y-1/2 left-5 right-5 top-1/2">
													<a
														class="btn btn-circle"
														if i == 0 {
															href={ templ.URL("#image-" + strconv.Itoa(len(data.Recipe.Images)-1)) }
														} else {
															href={ templ.URL("#image-" + strconv.Itoa(i-1)) }
														}
													>❮</a>
													<a
														class="btn btn-circle"
														if i == len(data.Recipe.Images) - 1 {
															href="#image-0"
														} else {
															href={ templ.URL("#image-" + strconv.Itoa(i+1)) }
														}
													>❯</a>
												</div>
											</div>
										}
									</div>
							}
						</div>
						<div class="grid grid-cols-3 col-span-3 md:grid-flow-row md:grid-rows-4 print:grid-rows-2" style="grid-template-rows: auto">
							<div class="grid grid-flow-col col-span-6 md:row-span-1 md:border-y md:border-gray-700 print:row-span-1 print:grid-cols-2 print:border-b-black print:border">
								<div class="col-span-2 grid place-items-center md:col-span-1 print:col-span-1 print:float-left print:ml-2 print:border-r print:border-black">
									<div class="badge badge-primary badge-outline">{ data.Recipe.Category }</div>
								</div>
								<div class="grid col-span-2 border-gray-700 place-items-center text-sm border-x p-2 md:p-2 md:col-span-1 print:hidden">
									if isAuthenticated {
										<form autocomplete="off" _="on submit halt the event" class="print:hidden">
											<label class="form-control w-full">
												<div class="label p-0">
													<span class="label-text">Servings</span>
												</div>
												<input
													id="yield"
													type="number"
													min="1"
													name="yield"
													if data.Recipe.Yield == 0 {
														value="1"
													} else {
														value={ fmt.Sprint(data.Recipe.Yield) }
													}
													class="input input-bordered input-sm w-24"
													hx-get={ fmt.Sprintf("/recipes/%d/scale", data.ID) }
													hx-trigger="input"
													hx-target="#ingredients-instructions-container"
												/>
											</label>
										</form>
									} else {
										<p class="text-sm text-center">{ fmt.Sprint(data.Recipe.Yield) } servings</p>
									}
								</div>
								<p class="hidden p-0 pt-2 print:grid print:text-center print:place-content-center">{ fmt.Sprint(data.Recipe.Yield) } servings</p>
								<div class="flex items-center justify-center col-span-2 text-sm md:col-span-1 print:hidden">
									if data.IsURL {
										<a
											class="btn btn-sm btn-outline no-underline print:hidden"
											href={ templ.URL(data.Recipe.URL) }
											target="_blank"
										>
											Source
										</a>
										<p class="hidden print:block print:whitespace-nowrap print:overflow-hidden print:text-ellipsis print:max-w-xs">{ data.Recipe.URL }</p>
									} else {
										<p class="text-center">
											Source:
											if data.Recipe.URL != "" {
												{ data.Recipe.URL }
											} else {
												Unknown
											}
										</p>
									}
								</div>
							</div>
							if len(data.Recipe.Keywords) > 0 {
								<div class="border-gray-700 border-y col-span-6 md:border-t-0 md:grid-cols-3 print:border-none">
									<div class="p-4">
										for _, kw := range data.Recipe.Keywords {
											<div class="badge badge-sm badge-neutral m-1 flex-auto">{ kw }</div>
										}
									</div>
								</div>
							}
							<div class={ "grid grid-flow-col border-gray-700 border-y col-span-6 md:border-t-0 md:grid-cols-2 md:row-span-2 print:border-none", templ.KV("print:hidden", data.Recipe.Nutrition.Equal(models.Nutrition{})) }>
								<div class="border-r border-gray-700 print:hidden">
									<table class="table table-zebra table-xs md:h-fit">
										<thead>
											<tr>
												<th>Time</th>
												<th>h:m:s</th>
											</tr>
										</thead>
										<tbody>
											<tr>
												<td>Prep:</td>
												<td>
													<time datetime={ data.FormattedTimes.PrepDateTime }>{ data.FormattedTimes.Prep }</time>
												</td>
											</tr>
											<tr>
												<td>Cooking:</td>
												<td>
													<time datetime={ data.FormattedTimes.CookDateTime }>{ data.FormattedTimes.Cook }</time>
												</td>
											</tr>
											<tr>
												<td>Total:</td>
												<td>
													<time datetime={ data.FormattedTimes.TotalDateTime }>{ data.FormattedTimes.Total }</time>
												</td>
											</tr>
										</tbody>
									</table>
								</div>
								<table class="table table-zebra table-xs print:hidden">
									<thead>
										<tr>
											<th>
												Nutrition (per
												if data.Recipe.Nutrition.IsPerServing {
													serving)
												} else {
													100g)
												}
											</th>
											<th>Amount</th>
										</tr>
									</thead>
									<tbody>
										<tr>
											<td>Calories:</td>
											<td>
												if data.Recipe.Nutrition.Calories == "" {
													-
												} else {
													{ data.Recipe.Nutrition.Calories }
												}
											</td>
										</tr>
										<tr>
											<td>Total carbs:</td>
											<td>
												if data.Recipe.Nutrition.TotalCarbohydrates == "" {
													-
												} else {
													{ data.Recipe.Nutrition.TotalCarbohydrates }
												}
											</td>
										</tr>
										<tr>
											<td>Sugars:</td>
											<td>
												if data.Recipe.Nutrition.Sugars == "" {
													-
												} else {
													{ data.Recipe.Nutrition.Sugars }
												}
											</td>
										</tr>
										<tr>
											<td>Protein:</td>
											<td>
												if data.Recipe.Nutrition.Protein == "" {
													-
												} else {
													{ data.Recipe.Nutrition.Protein }
												}
											</td>
										</tr>
										<tr>
											<td>Total fat:</td>
											<td>
												if data.Recipe.Nutrition.TotalFat == "" {
													-
												} else {
													{ data.Recipe.Nutrition.TotalFat }
												}
											</td>
										</tr>
										<tr>
											<td>Saturated fat:</td>
											<td>
												if data.Recipe.Nutrition.SaturatedFat == "" {
													-
												} else {
													{ data.Recipe.Nutrition.SaturatedFat }
												}
											</td>
										</tr>
										<tr>
											<td>Cholesterol:</td>
											<td>
												if data.Recipe.Nutrition.Cholesterol == "" {
													-
												} else {
													{ data.Recipe.Nutrition.Cholesterol }
												}
											</td>
										</tr>
										<tr>
											<td>Sodium:</td>
											<td>
												if data.Recipe.Nutrition.Sodium == "" {
													-
												} else {
													{ data.Recipe.Nutrition.Sodium }
												}
											</td>
										</tr>
										<tr>
											<td>Fiber:</td>
											<td>
												if data.Recipe.Nutrition.Fiber == "" {
													-
												} else {
													{ data.Recipe.Nutrition.Fiber }
												}
											</td>
										</tr>
									</tbody>
								</table>
								if !data.Recipe.Nutrition.Equal(models.Nutrition{}) {
									<div class="hidden pt-2 print:block print:mx-2 print:my-1">
										<h1 class="text-sm print:mb-1"><b>Nutrition Facts</b></h1>
										<p class="text-xs">{ data.Recipe.Nutrition.Format() }</p>
									</div>
								}
							</div>
							if data.Recipe.Description != "" {
								<div class={ "col-span-3 min-h-40 md:h-full md:row-span-1 print:hidden", templ.KV("hidden", data.Recipe.Description == "") }>
									<label>
										<textarea
											class="textarea w-full h-full resize-none"
											readonly
										>{ data.Recipe.Description }</textarea>
									</label>
								</div>
							}
						</div>
					</div>
					if data.Recipe.Description != "" {
						<div class="hidden print:block print:mx-2">
							<h1 class="text-sm print:mb-1"><b>Description</b></h1>
							{ data.Recipe.Description }
						</div>
					}
					<div class="border-gray-700 md:border-t">
						@IngredientsInstructions(data)
						<div class="hidden print:grid col-span-6 ml-2 my-1">
							if len(data.Recipe.Tools) > 0 {
								<h1 class="text-sm print:mb-1"><b>Tools</b></h1>
								<ol
									class="col-span-6 w-full mb-4"
									if len(data.Recipe.Tools) > 10 {
										style="column-count: 2"
									} else {
										style="column-count: 1"
									}
								>
									for _, t := range data.Recipe.Tools {
										<li class="text-sm">
											<label><input type="checkbox"/></label>
											<span class="pl-2">{ t.StringQuantity() }</span>
										</li>
									}
								</ol>
							}
							<h1 class="text-sm print:mb-1"><b>Ingredients</b></h1>
							<ol
								class="col-span-6 w-full print:mb-2"
								if len(data.Recipe.Ingredients) > 10 {
									style="column-count: 2"
								} else {
									style="column-count: 1"
								}
							>
								for _, e := range data.Recipe.Ingredients {
									<li class="text-sm">
										<label><input type="checkbox"/></label>
										<span class="pl-2">{ e }</span>
									</li>
								}
							</ol>
						</div>
						<div class="hidden col-span-5 overflow-visible print:inline">
							<h1 class="text-sm print:ml-2 print:mb-1"><b>Instructions</b></h1>
							<ol class="col-span-6 list-decimal w-full ml-6">
								for _, e := range data.Recipe.Instructions {
									<li class="print:mr-4">
										<span class="text-sm whitespace-pre-line">{ e }</span>
									</li>
								}
							</ol>
						</div>
					</div>
					<div class="hidden print:block print:mx-2 print:mb-2 print:text-sm">
						<h1 class="print:mb-1"><b>Source</b></h1>
						if data.IsURL {
							<p class="print:overflow-hidden">{ data.Recipe.URL }</p>
						} else {
							<p>
								Source:
								if data.Recipe.URL != "" {
									{ data.Recipe.URL }
								} else {
									Unknown
								}
							</p>
						}
					</div>
				</div>
			</div>
		</div>
	</section>
	<script>
        var wakeLock = null;
        initWakeLock();

        function initWakeLock() {
            navigator.wakeLock?.request("screen")
                .then((lock) => {
                    wakeLock = lock;
                    wakeLock.onrelease = () => {
                        wakeLock = null;
                        console.info("Screen lock deactivated.");
                    }
                    console.info("Screen lock activated.");
                })
                .catch((err) => {
                    console.log(`Screen lock error: ${err.name}, ${err.message}`)
                });
        }
    </script>
}

templ recipeKeywordEmpty() {
	<div id="hidden_keyword" class="hidden badge badge-sm badge-neutral p-3 pr-0">
		<input type="hidden" name="keywords" value=""/>
		<span class="select-none"></span>
		<button type="button" class="btn btn-xs btn-ghost" _="on click remove closest <div/>">X</button>
	</div>
	<div
		id="empty_keyword"
		class="badge badge-sm badge-neutral badge-outline p-3 pr-0"
		_="on keydown if event.key is 'Enter' halt the event then addKeyword(event)"
	>
		<label>
			<input id="new_keyword" type="text" placeholder="New keyword" class="input input-ghost input-xs w-[16ch] focus:outline-none" autocomplete="off"/>
		</label>
		<button
			type="button"
			class="btn btn-xs btn-ghost"
			_="on click addKeyword(event)"
		>&#10003;</button>
	</div>
}

templ IngredientsInstructions(data *templates.ViewRecipeData) {
	<div id="ingredients-instructions-container" class="grid text-sm md:grid-flow-col md:col-span-6">
		<div class="col-span-6 border-gray-700 px-4 py-2 border-y md:col-span-2 md:border-r md:border-y-0 print:hidden">
			if len(data.Recipe.Tools) > 0 {
				<h2 class="font-semibold text-center underline pb-1">Tools</h2>
				<ul class="md:pb-2">
					for _, t := range data.Recipe.Tools {
						<li class="form-control hover:bg-gray-100 dark:hover:bg-gray-700">
							<label class="label justify-start">
								<input type="checkbox" class="checkbox"/>
								<span class="label-text pl-2">{ t.StringQuantity() }</span>
							</label>
						</li>
					}
				</ul>
			}
			<h2 class="font-semibold text-center underline pb-1">Ingredients</h2>
			<ul>
				for _, e := range data.Recipe.Ingredients {
					<li class="form-control hover:bg-gray-100 dark:hover:bg-gray-700">
						<label class="label justify-start">
							<input type="checkbox" class="checkbox"/>
							<span class="label-text pl-2">{ e }</span>
						</label>
					</li>
				}
			</ul>
		</div>
		<div class="col-span-6 px-8 py-2 border-gray-700 md:rounded-bl-none md:col-span-4 print:hidden">
			<h2 class="font-semibold text-center underline pb-1">Instructions</h2>
			<ol class="grid list-decimal">
				for _, e := range data.Recipe.Instructions {
					<li
						class="min-w-full py-2 select-none hover:bg-gray-100 dark:hover:bg-gray-700"
						_="on mousedown toggle .line-through"
					>
						<span class="whitespace-pre-line">{ e }</span>
					</li>
				}
			</ol>
		</div>
	</div>
}

templ ShareLink(data templates.Data) {
	<div class="grid grid-flow-col gap-2">
		<label>
			<input type="url" value={ data.Content } class="input input-bordered w-full" readonly="readonly"/>
		</label>
		<button id="copy_button" class="btn btn-neutral" title="Copy to clipboard" onClick={ copyToClipboard(data.Content) }>
			Copy
		</button>
	</div>
}

script copyToClipboard(text string) {
    if (window.navigator.clipboard) {
        navigator.clipboard.writeText(text);
        copy_button.textContent = "Copied!";
        copy_button.setAttribute("disabled", true);
        copy_button.classList.toggle(".btn-disabled");
    } else {
        alert('Your browser does not support the clipboard feature. Please copy the link manually.');
    }
}
